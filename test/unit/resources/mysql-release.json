{
  "name": "mysql",
  "info": {
    "firstDeployed": "2023-06-09T11:53:14.120656-05:00",
    "lastDeployed": "2023-06-09T11:53:14.120656-05:00",
    "deleted": "",
    "description": "Install complete",
    "status": "deployed",
    "notes": "CHART NAME: mysql\nCHART VERSION: 9.10.2\nAPP VERSION: 8.0.33\n\n** Please be patient while the chart is being deployed **\n\nTip:\n\n  Watch the deployment status using the command: kubectl get pods -w --namespace mysql\n\nServices:\n\n  echo Primary: mysql.mysql.svc.cluster.local:3306\n\nExecute the following to get the administrator credentials:\n\n  echo Username: root\n  MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace mysql mysql -o jsonpath=\"{.data.mysql-root-password}\" | base64 -d)\n\nTo connect to your database:\n\n  1. Run a pod that you can use as a client:\n\n      kubectl run mysql-client --rm --tty -i --restart='Never' --image  docker.io/bitnami/mysql:8.0.33-debian-11-r17 --namespace mysql --env MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD --command -- bash\n\n  2. To connect to primary service (read/write):\n\n      mysql -h mysql.mysql.svc.cluster.local -uroot -p\"$MYSQL_ROOT_PASSWORD\"\n\n\n\n\n\n"
  },
  "chart": {
    "metadata": {
      "name": "mysql",
      "home": "https://bitnami.com",
      "sources": [
        "https://github.com/bitnami/charts/tree/main/bitnami/mysql"
      ],
      "version": "9.10.2",
      "description": "MySQL is a fast, reliable, scalable, and easy to use open source relational database system. Designed to handle mission-critical, heavy-load production applications.",
      "keywords": [
        "mysql",
        "database",
        "sql",
        "cluster",
        "high availability"
      ],
      "maintainers": [
        {
          "name": "VMware, Inc.",
          "url": "https://github.com/bitnami/charts"
        }
      ],
      "icon": "https://bitnami.com/assets/stacks/mysql/img/mysql-stack-220x234.png",
      "apiVersion": "v2",
      "appVersion": "8.0.33",
      "annotations": {
        "category": "Database",
        "licenses": "Apache-2.0"
      },
      "dependencies": [
        {
          "name": "common",
          "version": "2.x.x",
          "repository": "oci://registry-1.docker.io/bitnamicharts",
          "tags": [
            "bitnami-common"
          ],
          "enabled": true
        }
      ]
    },
    "lock": {
      "generated": "2023-05-21T16:18:55.681404482Z",
      "digest": "sha256:8c1a5dc923412d11d4d841420494b499cb707305c8b9f87f45ea1a8bf3172cb3",
      "dependencies": [
        {
          "name": "common",
          "version": "2.4.0",
          "repository": "oci://registry-1.docker.io/bitnamicharts"
        }
      ]
    },
    "templates": [
      {
        "name": "templates/NOTES.txt",
        "data": "Q0hBUlQgTkFNRToge3sgLkNoYXJ0Lk5hbWUgfX0KQ0hBUlQgVkVSU0lPTjoge3sgLkNoYXJ0LlZlcnNpb24gfX0KQVBQIFZFUlNJT046IHt7IC5DaGFydC5BcHBWZXJzaW9uIH19CgoqKiBQbGVhc2UgYmUgcGF0aWVudCB3aGlsZSB0aGUgY2hhcnQgaXMgYmVpbmcgZGVwbG95ZWQgKioKCnt7LSBpZiAuVmFsdWVzLmRpYWdub3N0aWNNb2RlLmVuYWJsZWQgfX0KVGhlIGNoYXJ0IGhhcyBiZWVuIGRlcGxveWVkIGluIGRpYWdub3N0aWMgbW9kZS4gQWxsIHByb2JlcyBoYXZlIGJlZW4gZGlzYWJsZWQgYW5kIHRoZSBjb21tYW5kIGhhcyBiZWVuIG92ZXJ3cml0dGVuIHdpdGg6CgogIGNvbW1hbmQ6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLmRpYWdub3N0aWNNb2RlLmNvbW1hbmQgImNvbnRleHQiICQpIHwgbmluZGVudCA0IH19CiAgYXJnczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuYXJncyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDQgfX0KCkdldCB0aGUgbGlzdCBvZiBwb2RzIGJ5IGV4ZWN1dGluZzoKCiAga3ViZWN0bCBnZXQgcG9kcyAtLW5hbWVzcGFjZSB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIH19IC1sIGFwcC5rdWJlcm5ldGVzLmlvL2luc3RhbmNlPXt7IC5SZWxlYXNlLk5hbWUgfX0KCkFjY2VzcyB0aGUgcG9kIHlvdSB3YW50IHRvIGRlYnVnIGJ5IGV4ZWN1dGluZwoKICBrdWJlY3RsIGV4ZWMgLS1uYW1lc3BhY2Uge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB9fSAtdGkgPE5BTUUgT0YgVEhFIFBPRD4gLS0gYmFzaAoKSW4gb3JkZXIgdG8gcmVwbGljYXRlIHRoZSBjb250YWluZXIgc3RhcnR1cCBzY3JpcHRzIGV4ZWN1dGUgdGhpcyBjb21tYW5kOgoKICAgIC9vcHQvYml0bmFtaS9zY3JpcHRzL215c3FsL2VudHJ5cG9pbnQuc2ggL29wdC9iaXRuYW1pL3NjcmlwdHMvbXlzcWwvcnVuLnNoCgp7ey0gZWxzZSB9fQoKVGlwOgoKICBXYXRjaCB0aGUgZGVwbG95bWVudCBzdGF0dXMgdXNpbmcgdGhlIGNvbW1hbmQ6IGt1YmVjdGwgZ2V0IHBvZHMgLXcgLS1uYW1lc3BhY2Uge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB9fQoKU2VydmljZXM6CgogIGVjaG8gUHJpbWFyeToge3sgaW5jbHVkZSAibXlzcWwucHJpbWFyeS5mdWxsbmFtZSIgLiB9fS57eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIH19LnN2Yy57eyAuVmFsdWVzLmNsdXN0ZXJEb21haW4gfX06e3sgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2UucG9ydHMubXlzcWwgfX0Ke3stIGlmIGVxIC5WYWx1ZXMuYXJjaGl0ZWN0dXJlICJyZXBsaWNhdGlvbiIgfX0KICBlY2hvIFNlY29uZGFyeToge3sgaW5jbHVkZSAibXlzcWwuc2Vjb25kYXJ5LmZ1bGxuYW1lIiAuIH19Lnt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5uYW1lc3BhY2UiIC4gfX0uc3ZjLnt7IC5WYWx1ZXMuY2x1c3RlckRvbWFpbiB9fTp7eyAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLnBvcnRzLm15c3FsIH19Cnt7LSBlbmQgfX0KCkV4ZWN1dGUgdGhlIGZvbGxvd2luZyB0byBnZXQgdGhlIGFkbWluaXN0cmF0b3IgY3JlZGVudGlhbHM6CgogIGVjaG8gVXNlcm5hbWU6IHJvb3QKICBNWVNRTF9ST09UX1BBU1NXT1JEPSQoa3ViZWN0bCBnZXQgc2VjcmV0IC0tbmFtZXNwYWNlIHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5uYW1lc3BhY2UiIC4gfX0ge3sgdGVtcGxhdGUgIm15c3FsLnNlY3JldE5hbWUiIC4gfX0gLW8ganNvbnBhdGg9InsuZGF0YS5teXNxbC1yb290LXBhc3N3b3JkfSIgfCBiYXNlNjQgLWQpCgpUbyBjb25uZWN0IHRvIHlvdXIgZGF0YWJhc2U6CgogIDEuIFJ1biBhIHBvZCB0aGF0IHlvdSBjYW4gdXNlIGFzIGEgY2xpZW50OgoKICAgICAga3ViZWN0bCBydW4ge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuIH19LWNsaWVudCAtLXJtIC0tdHR5IC1pIC0tcmVzdGFydD0nTmV2ZXInIC0taW1hZ2UgIHt7IHRlbXBsYXRlICJteXNxbC5pbWFnZSIgLiB9fSAtLW5hbWVzcGFjZSB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIH19IC0tZW52IE1ZU1FMX1JPT1RfUEFTU1dPUkQ9JE1ZU1FMX1JPT1RfUEFTU1dPUkQgLS1jb21tYW5kIC0tIGJhc2gKCiAgMi4gVG8gY29ubmVjdCB0byBwcmltYXJ5IHNlcnZpY2UgKHJlYWQvd3JpdGUpOgoKICAgICAgbXlzcWwgLWgge3sgaW5jbHVkZSAibXlzcWwucHJpbWFyeS5mdWxsbmFtZSIgLiB9fS57eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIH19LnN2Yy57eyAuVmFsdWVzLmNsdXN0ZXJEb21haW4gfX0gLXVyb290IC1wIiRNWVNRTF9ST09UX1BBU1NXT1JEIgoKe3stIGlmIGVxIC5WYWx1ZXMuYXJjaGl0ZWN0dXJlICJyZXBsaWNhdGlvbiIgfX0KCiAgMy4gVG8gY29ubmVjdCB0byBzZWNvbmRhcnkgc2VydmljZSAocmVhZC1vbmx5KToKCiAgICAgIG15c3FsIC1oIHt7IGluY2x1ZGUgIm15c3FsLnNlY29uZGFyeS5mdWxsbmFtZSIgLiB9fS57eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIH19LnN2Yy57eyAuVmFsdWVzLmNsdXN0ZXJEb21haW4gfX0gLXVyb290IC1wIiRNWVNRTF9ST09UX1BBU1NXT1JEIgp7ey0gZW5kIH19Cgp7eyBpZiBhbmQgKC5WYWx1ZXMubmV0d29ya1BvbGljeS5lbmFibGVkKSAobm90IC5WYWx1ZXMubmV0d29ya1BvbGljeS5hbGxvd0V4dGVybmFsKSB9fQpOb3RlOiBTaW5jZSBOZXR3b3JrUG9saWN5IGlzIGVuYWJsZWQsIG9ubHkgcG9kcyB3aXRoIGxhYmVsIHt7IHRlbXBsYXRlICJjb21tb24ubmFtZXMuZnVsbG5hbWUiIC4gfX0tY2xpZW50PXRydWUiIHdpbGwgYmUgYWJsZSB0byBjb25uZWN0IHRvIE15U1FMLgp7ey0gZW5kIH19Cgp7ey0gaWYgLlZhbHVlcy5tZXRyaWNzLmVuYWJsZWQgfX0KClRvIGFjY2VzcyB0aGUgTXlTUUwgUHJvbWV0aGV1cyBtZXRyaWNzIGZyb20gb3V0c2lkZSB0aGUgY2x1c3RlciBleGVjdXRlIHRoZSBmb2xsb3dpbmcgY29tbWFuZHM6CgogICAga3ViZWN0bCBwb3J0LWZvcndhcmQgLS1uYW1lc3BhY2Uge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB9fSBzdmMve3sgcHJpbnRmICIlcy1tZXRyaWNzIiAoaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuKSB9fSB7eyAuVmFsdWVzLm1ldHJpY3Muc2VydmljZS5wb3J0IH19Ont7IC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlLnBvcnQgfX0gJgogICAgY3VybCBodHRwOi8vMTI3LjAuMC4xOnt7IC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlLnBvcnQgfX0vbWV0cmljcwoKe3stIGVuZCB9fQoKe3sgaW5jbHVkZSAibXlzcWwudmFsaWRhdGVWYWx1ZXMiIC4gfX0Ke3sgaW5jbHVkZSAibXlzcWwuY2hlY2tSb2xsaW5nVGFncyIgLiB9fQp7ey0gZW5kIH19Cg=="
      },
      {
        "name": "templates/_helpers.tpl",
        "data": "e3svKiB2aW06IHNldCBmaWxldHlwZT1tdXN0YWNoZTogKi99fQoKe3stIGRlZmluZSAibXlzcWwucHJpbWFyeS5mdWxsbmFtZSIgLX19Cnt7LSBpZiBlcSAuVmFsdWVzLmFyY2hpdGVjdHVyZSAicmVwbGljYXRpb24iIH19Cnt7LSBwcmludGYgIiVzLSVzIiAoaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuKSAuVmFsdWVzLnByaW1hcnkubmFtZSB8IHRydW5jIDYzIHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbHNlIC19fQp7ey0gaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3stIGRlZmluZSAibXlzcWwuc2Vjb25kYXJ5LmZ1bGxuYW1lIiAtfX0Ke3stIHByaW50ZiAiJXMtJXMiIChpbmNsdWRlICJjb21tb24ubmFtZXMuZnVsbG5hbWUiIC4pIC5WYWx1ZXMuc2Vjb25kYXJ5Lm5hbWUgfCB0cnVuYyA2MyB8IHRyaW1TdWZmaXggIi0iIC19fQp7ey0gZW5kIC19fQoKe3svKgpSZXR1cm4gdGhlIHByb3BlciBNeVNRTCBpbWFnZSBuYW1lCiovfX0Ke3stIGRlZmluZSAibXlzcWwuaW1hZ2UiIC19fQp7ey0gaW5jbHVkZSAiY29tbW9uLmltYWdlcy5pbWFnZSIgKGRpY3QgImltYWdlUm9vdCIgLlZhbHVlcy5pbWFnZSAiZ2xvYmFsIiAuVmFsdWVzLmdsb2JhbCkgfX0Ke3stIGVuZCAtfX0KCnt7LyoKUmV0dXJuIHRoZSBwcm9wZXIgbWV0cmljcyBpbWFnZSBuYW1lCiovfX0Ke3stIGRlZmluZSAibXlzcWwubWV0cmljcy5pbWFnZSIgLX19Cnt7LSBpbmNsdWRlICJjb21tb24uaW1hZ2VzLmltYWdlIiAoZGljdCAiaW1hZ2VSb290IiAuVmFsdWVzLm1ldHJpY3MuaW1hZ2UgImdsb2JhbCIgLlZhbHVlcy5nbG9iYWwpIH19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0aGUgcHJvcGVyIGltYWdlIG5hbWUgKGZvciB0aGUgaW5pdCBjb250YWluZXIgdm9sdW1lLXBlcm1pc3Npb25zIGltYWdlKQoqL319Cnt7LSBkZWZpbmUgIm15c3FsLnZvbHVtZVBlcm1pc3Npb25zLmltYWdlIiAtfX0Ke3stIGluY2x1ZGUgImNvbW1vbi5pbWFnZXMuaW1hZ2UiIChkaWN0ICJpbWFnZVJvb3QiIC5WYWx1ZXMudm9sdW1lUGVybWlzc2lvbnMuaW1hZ2UgImdsb2JhbCIgLlZhbHVlcy5nbG9iYWwpIH19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0aGUgcHJvcGVyIERvY2tlciBJbWFnZSBSZWdpc3RyeSBTZWNyZXQgTmFtZXMKKi99fQp7ey0gZGVmaW5lICJteXNxbC5pbWFnZVB1bGxTZWNyZXRzIiAtfX0Ke3stIGluY2x1ZGUgImNvbW1vbi5pbWFnZXMucHVsbFNlY3JldHMiIChkaWN0ICJpbWFnZXMiIChsaXN0IC5WYWx1ZXMuaW1hZ2UgLlZhbHVlcy5tZXRyaWNzLmltYWdlIC5WYWx1ZXMudm9sdW1lUGVybWlzc2lvbnMuaW1hZ2UpICJnbG9iYWwiIC5WYWx1ZXMuZ2xvYmFsKSB9fQp7ey0gZW5kIC19fQoKe3svKgpHZXQgdGhlIGluaXRpYWxpemF0aW9uIHNjcmlwdHMgQ29uZmlnTWFwIG5hbWUuCiovfX0Ke3stIGRlZmluZSAibXlzcWwuaW5pdGRiU2NyaXB0c0NNIiAtfX0Ke3stIGlmIC5WYWx1ZXMuaW5pdGRiU2NyaXB0c0NvbmZpZ01hcCAtfX0KICAgIHt7LSBwcmludGYgIiVzIiAodHBsIC5WYWx1ZXMuaW5pdGRiU2NyaXB0c0NvbmZpZ01hcCAkKSAtfX0Ke3stIGVsc2UgLX19CiAgICB7ey0gcHJpbnRmICIlcy1pbml0LXNjcmlwdHMiIChpbmNsdWRlICJteXNxbC5wcmltYXJ5LmZ1bGxuYW1lIiAuKSAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKIFJldHVybnMgdGhlIHByb3BlciBzZXJ2aWNlIGFjY291bnQgbmFtZSBkZXBlbmRpbmcgaWYgYW4gZXhwbGljaXQgc2VydmljZSBhY2NvdW50IG5hbWUgaXMgc2V0CiBpbiB0aGUgdmFsdWVzIGZpbGUuIElmIHRoZSBuYW1lIGlzIG5vdCBzZXQgaXQgd2lsbCBkZWZhdWx0IHRvIGVpdGhlciBteXNxbC5mdWxsbmFtZSBpZiBzZXJ2aWNlQWNjb3VudC5jcmVhdGUKIGlzIHRydWUgb3IgZGVmYXVsdCBvdGhlcndpc2UuCiovfX0Ke3stIGRlZmluZSAibXlzcWwuc2VydmljZUFjY291bnROYW1lIiAtfX0KICAgIHt7LSBpZiAuVmFsdWVzLnNlcnZpY2VBY2NvdW50LmNyZWF0ZSAtfX0KICAgICAgICB7eyBkZWZhdWx0IChpbmNsdWRlICJjb21tb24ubmFtZXMuZnVsbG5hbWUiIC4pIC5WYWx1ZXMuc2VydmljZUFjY291bnQubmFtZSB9fQogICAge3stIGVsc2UgLX19CiAgICAgICAge3sgZGVmYXVsdCAiZGVmYXVsdCIgLlZhbHVlcy5zZXJ2aWNlQWNjb3VudC5uYW1lIH19CiAgICB7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpSZXR1cm4gdGhlIGNvbmZpZ21hcCB3aXRoIHRoZSBNeVNRTCBQcmltYXJ5IGNvbmZpZ3VyYXRpb24KKi99fQp7ey0gZGVmaW5lICJteXNxbC5wcmltYXJ5LmNvbmZpZ21hcE5hbWUiIC19fQp7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LmV4aXN0aW5nQ29uZmlnbWFwIC19fQogICAge3stIHByaW50ZiAiJXMiICh0cGwgLlZhbHVlcy5wcmltYXJ5LmV4aXN0aW5nQ29uZmlnbWFwICQpIC19fQp7ey0gZWxzZSAtfX0KICAgIHt7LSBwcmludGYgIiVzIiAoaW5jbHVkZSAibXlzcWwucHJpbWFyeS5mdWxsbmFtZSIgLikgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0cnVlIGlmIGEgY29uZmlnbWFwIG9iamVjdCBzaG91bGQgYmUgY3JlYXRlZCBmb3IgTXlTUUwgU2Vjb25kYXJ5CiovfX0Ke3stIGRlZmluZSAibXlzcWwucHJpbWFyeS5jcmVhdGVDb25maWdtYXAiIC19fQp7ey0gaWYgYW5kIC5WYWx1ZXMucHJpbWFyeS5jb25maWd1cmF0aW9uIChub3QgLlZhbHVlcy5wcmltYXJ5LmV4aXN0aW5nQ29uZmlnbWFwKSB9fQogICAge3stIHRydWUgLX19Cnt7LSBlbHNlIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpSZXR1cm4gdGhlIGNvbmZpZ21hcCB3aXRoIHRoZSBNeVNRTCBQcmltYXJ5IGNvbmZpZ3VyYXRpb24KKi99fQp7ey0gZGVmaW5lICJteXNxbC5zZWNvbmRhcnkuY29uZmlnbWFwTmFtZSIgLX19Cnt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5leGlzdGluZ0NvbmZpZ21hcCAtfX0KICAgIHt7LSBwcmludGYgIiVzIiAodHBsIC5WYWx1ZXMuc2Vjb25kYXJ5LmV4aXN0aW5nQ29uZmlnbWFwICQpIC19fQp7ey0gZWxzZSAtfX0KICAgIHt7LSBwcmludGYgIiVzIiAoaW5jbHVkZSAibXlzcWwuc2Vjb25kYXJ5LmZ1bGxuYW1lIiAuKSAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCnt7LyoKUmV0dXJuIHRydWUgaWYgYSBjb25maWdtYXAgb2JqZWN0IHNob3VsZCBiZSBjcmVhdGVkIGZvciBNeVNRTCBTZWNvbmRhcnkKKi99fQp7ey0gZGVmaW5lICJteXNxbC5zZWNvbmRhcnkuY3JlYXRlQ29uZmlnbWFwIiAtfX0Ke3stIGlmIGFuZCAoZXEgLlZhbHVlcy5hcmNoaXRlY3R1cmUgInJlcGxpY2F0aW9uIikgLlZhbHVlcy5zZWNvbmRhcnkuY29uZmlndXJhdGlvbiAobm90IC5WYWx1ZXMuc2Vjb25kYXJ5LmV4aXN0aW5nQ29uZmlnbWFwKSB9fQogICAge3stIHRydWUgLX19Cnt7LSBlbHNlIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKe3svKgpSZXR1cm4gdGhlIHNlY3JldCB3aXRoIE15U1FMIGNyZWRlbnRpYWxzCiovfX0Ke3stIGRlZmluZSAibXlzcWwuc2VjcmV0TmFtZSIgLX19CiAgICB7ey0gaWYgLlZhbHVlcy5hdXRoLmV4aXN0aW5nU2VjcmV0IC19fQogICAgICAgIHt7LSBwcmludGYgIiVzIiAodHBsIC5WYWx1ZXMuYXV0aC5leGlzdGluZ1NlY3JldCAkKSAtfX0KICAgIHt7LSBlbHNlIC19fQogICAgICAgIHt7LSBwcmludGYgIiVzIiAoaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuKSAtfX0KICAgIHt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybiB0cnVlIGlmIGEgc2VjcmV0IG9iamVjdCBzaG91bGQgYmUgY3JlYXRlZCBmb3IgTXlTUUwKKi99fQp7ey0gZGVmaW5lICJteXNxbC5jcmVhdGVTZWNyZXQiIC19fQp7ey0gaWYgYW5kIChub3QgLlZhbHVlcy5hdXRoLmV4aXN0aW5nU2VjcmV0KSAobm90IC5WYWx1ZXMuYXV0aC5jdXN0b21QYXNzd29yZEZpbGVzKSB9fQogICAge3stIHRydWUgLX19Cnt7LSBlbmQgLX19Cnt7LSBlbmQgLX19Cgp7ey8qClJldHVybnMgdGhlIGF2YWlsYWJsZSB2YWx1ZSBmb3IgY2VydGFpbiBrZXkgaW4gYW4gZXhpc3Rpbmcgc2VjcmV0IChpZiBpdCBleGlzdHMpLApvdGhlcndpc2UgaXQgZ2VuZXJhdGVzIGEgcmFuZG9tIHZhbHVlLgoqL319Cnt7LSBkZWZpbmUgImdldFZhbHVlRnJvbVNlY3JldCIgfX0KICAgIHt7LSAkbGVuIDo9IChkZWZhdWx0IDE2IC5MZW5ndGgpIHwgaW50IC19fQogICAge3stICRvYmogOj0gKGxvb2t1cCAidjEiICJTZWNyZXQiIC5OYW1lc3BhY2UgLk5hbWUpLmRhdGEgLX19CiAgICB7ey0gaWYgJG9iaiB9fQogICAgICAgIHt7LSBpbmRleCAkb2JqIC5LZXkgfCBiNjRkZWMgLX19CiAgICB7ey0gZWxzZSAtfX0KICAgICAgICB7ey0gcmFuZEFscGhhTnVtICRsZW4gLX19CiAgICB7ey0gZW5kIC19fQp7ey0gZW5kIH19Cgp7ey8qIENoZWNrIGlmIHRoZXJlIGFyZSByb2xsaW5nIHRhZ3MgaW4gdGhlIGltYWdlcyAqL319Cnt7LSBkZWZpbmUgIm15c3FsLmNoZWNrUm9sbGluZ1RhZ3MiIC19fQp7ey0gaW5jbHVkZSAiY29tbW9uLndhcm5pbmdzLnJvbGxpbmdUYWciIC5WYWx1ZXMuaW1hZ2UgfX0Ke3stIGluY2x1ZGUgImNvbW1vbi53YXJuaW5ncy5yb2xsaW5nVGFnIiAuVmFsdWVzLm1ldHJpY3MuaW1hZ2UgfX0Ke3stIGluY2x1ZGUgImNvbW1vbi53YXJuaW5ncy5yb2xsaW5nVGFnIiAuVmFsdWVzLnZvbHVtZVBlcm1pc3Npb25zLmltYWdlIH19Cnt7LSBlbmQgLX19Cgp7ey8qCkNvbXBpbGUgYWxsIHdhcm5pbmdzIGludG8gYSBzaW5nbGUgbWVzc2FnZSwgYW5kIGNhbGwgZmFpbC4KKi99fQp7ey0gZGVmaW5lICJteXNxbC52YWxpZGF0ZVZhbHVlcyIgLX19Cnt7LSAkbWVzc2FnZXMgOj0gbGlzdCAtfX0Ke3stICRtZXNzYWdlcyA6PSB3aXRob3V0ICRtZXNzYWdlcyAiIiAtfX0Ke3stICRtZXNzYWdlIDo9IGpvaW4gIlxuIiAkbWVzc2FnZXMgLX19Cgp7ey0gaWYgJG1lc3NhZ2UgLX19Cnt7LSBwcmludGYgIlxuVkFMVUVTIFZBTElEQVRJT046XG4lcyIgJG1lc3NhZ2UgfCBmYWlsIC19fQp7ey0gZW5kIC19fQp7ey0gZW5kIC19fQo="
      },
      {
        "name": "templates/extra-list.yaml",
        "data": "e3stIHJhbmdlIC5WYWx1ZXMuZXh0cmFEZXBsb3kgfX0KLS0tCnt7IGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC4gImNvbnRleHQiICQpIH19Cnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/metrics-svc.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMubWV0cmljcy5lbmFibGVkIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZToge3sgcHJpbnRmICIlcy1tZXRyaWNzIiAoaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuKSB9fQogIG5hbWVzcGFjZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB8IHF1b3RlIH19CiAgbGFiZWxzOiB7ey0gaW5jbHVkZSAiY29tbW9uLmxhYmVscy5zdGFuZGFyZCIgLiB8IG5pbmRlbnQgNCB9fQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogbWV0cmljcwogIHt7LSBpZiBvciAuVmFsdWVzLm1ldHJpY3Muc2VydmljZS5hbm5vdGF0aW9ucyAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zIH19CiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gaWYgLlZhbHVlcy5tZXRyaWNzLnNlcnZpY2UuYW5ub3RhdGlvbnMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLm1ldHJpY3Muc2VydmljZS5hbm5vdGF0aW9ucyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0Kc3BlYzoKICB0eXBlOiB7eyAuVmFsdWVzLm1ldHJpY3Muc2VydmljZS50eXBlIH19CiAge3stIGlmIGFuZCAuVmFsdWVzLm1ldHJpY3Muc2VydmljZS5jbHVzdGVySVAgKGVxIC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlLnR5cGUgIkNsdXN0ZXJJUCIpIH19CiAgY2x1c3RlcklQOiB7eyAuVmFsdWVzLm1ldHJpY3Muc2VydmljZS5jbHVzdGVySVAgfX0KICB7ey0gZW5kIH19CiAgcG9ydHM6CiAgICAtIHBvcnQ6IHt7IC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlLnBvcnQgfX0KICAgICAgdGFyZ2V0UG9ydDogbWV0cmljcwogICAgICBwcm90b2NvbDogVENQCiAgICAgIG5hbWU6IG1ldHJpY3MKICBzZWxlY3Rvcjoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMubWF0Y2hMYWJlbHMiICQgfCBuaW5kZW50IDQgfX0Ke3stIGVuZCB9fQo="
      },
      {
        "name": "templates/networkpolicy.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMubmV0d29ya1BvbGljeS5lbmFibGVkIH19CmtpbmQ6IE5ldHdvcmtQb2xpY3kKYXBpVmVyc2lvbjoge3sgdGVtcGxhdGUgImNvbW1vbi5jYXBhYmlsaXRpZXMubmV0d29ya1BvbGljeS5hcGlWZXJzaW9uIiAuIH19Cm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJjb21tb24ubmFtZXMuZnVsbG5hbWUiIC4gfX0KICBuYW1lc3BhY2U6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5uYW1lc3BhY2UiIC4gfCBxdW90ZSB9fQogIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkxhYmVscyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CnNwZWM6CiAgcG9kU2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMubWF0Y2hMYWJlbHMiIC4gfCBuaW5kZW50IDYgfX0KICBpbmdyZXNzOgogICAgIyBBbGxvdyBpbmJvdW5kIGNvbm5lY3Rpb25zCiAgICAtIHBvcnRzOgogICAgICAgIC0gcG9ydDoge3sgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2UucG9ydHMubXlzcWwgfX0KICAgICAge3stIGlmIG5vdCAuVmFsdWVzLm5ldHdvcmtQb2xpY3kuYWxsb3dFeHRlcm5hbCB9fQogICAgICBmcm9tOgogICAgICAgIC0gcG9kU2VsZWN0b3I6CiAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgIHt7IHRlbXBsYXRlICJjb21tb24ubmFtZXMuZnVsbG5hbWUiIC4gfX0tY2xpZW50OiAidHJ1ZSIKICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLm5ldHdvcmtQb2xpY3kuZXhwbGljaXROYW1lc3BhY2VzU2VsZWN0b3IgfX0KICAgICAgICAgIG5hbWVzcGFjZVNlbGVjdG9yOgp7eyB0b1lhbWwgLlZhbHVlcy5uZXR3b3JrUG9saWN5LmV4cGxpY2l0TmFtZXNwYWNlc1NlbGVjdG9yIHwgaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgLSBwb2RTZWxlY3RvcjoKICAgICAgICAgICAgbWF0Y2hMYWJlbHM6CiAgICAgICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24ubGFiZWxzLm1hdGNoTGFiZWxzIiAuIHwgbmluZGVudCAxNCB9fQogICAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5tZXRyaWNzLmVuYWJsZWQgfX0KICAgICMgQWxsb3cgcHJvbWV0aGV1cyBzY3JhcGVzCiAgICAtIHBvcnRzOgogICAgICAgIC0gcG9ydDogOTEwNAogICAge3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
      },
      {
        "name": "templates/primary/configmap.yaml",
        "data": "e3stIGlmIChpbmNsdWRlICJteXNxbC5wcmltYXJ5LmNyZWF0ZUNvbmZpZ21hcCIgLikgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgIm15c3FsLnByaW1hcnkuZnVsbG5hbWUiIC4gfX0KICBuYW1lc3BhY2U6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5uYW1lc3BhY2UiIC4gfCBxdW90ZSB9fQogIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDQgfX0KICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogcHJpbWFyeQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0KZGF0YToKICBteS5jbmY6IHwtCiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS5jb25maWd1cmF0aW9uICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0Ke3stIGVuZCAtfX0K"
      },
      {
        "name": "templates/primary/initialization-configmap.yaml",
        "data": "e3stIGlmIGFuZCAuVmFsdWVzLmluaXRkYlNjcmlwdHMgKG5vdCAuVmFsdWVzLmluaXRkYlNjcmlwdHNDb25maWdNYXApIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lOiB7eyBwcmludGYgIiVzLWluaXQtc2NyaXB0cyIgKGluY2x1ZGUgIm15c3FsLnByaW1hcnkuZnVsbG5hbWUiIC4pIH19CiAgbmFtZXNwYWNlOiB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIHwgcXVvdGUgfX0KICBsYWJlbHM6IHt7LSBpbmNsdWRlICJjb21tb24ubGFiZWxzLnN0YW5kYXJkIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHByaW1hcnkKICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkxhYmVscyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CmRhdGE6Cnt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLmluaXRkYlNjcmlwdHMgImNvbnRleHQiIC4pIHwgbmluZGVudCAyIH19Cnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/primary/pdb.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMucHJpbWFyeS5wZGIuY3JlYXRlIH19CmFwaVZlcnNpb246IHt7IGluY2x1ZGUgImNvbW1vbi5jYXBhYmlsaXRpZXMucG9saWN5LmFwaVZlcnNpb24iIC4gfX0Ka2luZDogUG9kRGlzcnVwdGlvbkJ1ZGdldAptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJteXNxbC5wcmltYXJ5LmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIHwgcXVvdGUgfX0KICBsYWJlbHM6IHt7LSBpbmNsdWRlICJjb21tb24ubGFiZWxzLnN0YW5kYXJkIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHByaW1hcnkKICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkxhYmVscyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CnNwZWM6CiAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5wZGIubWluQXZhaWxhYmxlIH19CiAgbWluQXZhaWxhYmxlOiB7eyAuVmFsdWVzLnByaW1hcnkucGRiLm1pbkF2YWlsYWJsZSB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnBkYi5tYXhVbmF2YWlsYWJsZSB9fQogIG1heFVuYXZhaWxhYmxlOiB7eyAuVmFsdWVzLnByaW1hcnkucGRiLm1heFVuYXZhaWxhYmxlIH19CiAge3stIGVuZCB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6IHt7IGluY2x1ZGUgImNvbW1vbi5sYWJlbHMubWF0Y2hMYWJlbHMiIC4gfCBuaW5kZW50IDYgfX0KICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50OiBwcmltYXJ5Cnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/primary/statefulset.yaml",
        "data": "YXBpVmVyc2lvbjoge3sgaW5jbHVkZSAiY29tbW9uLmNhcGFiaWxpdGllcy5zdGF0ZWZ1bHNldC5hcGlWZXJzaW9uIiAuIH19CmtpbmQ6IFN0YXRlZnVsU2V0Cm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgIm15c3FsLnByaW1hcnkuZnVsbG5hbWUiIC4gfX0KICBuYW1lc3BhY2U6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5uYW1lc3BhY2UiIC4gfCBxdW90ZSB9fQogIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDQgfX0KICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogcHJpbWFyeQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0Kc3BlYzoKICByZXBsaWNhczogMQogIHBvZE1hbmFnZW1lbnRQb2xpY3k6IHt7IC5WYWx1ZXMucHJpbWFyeS5wb2RNYW5hZ2VtZW50UG9saWN5IHwgcXVvdGUgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOiB7eyBpbmNsdWRlICJjb21tb24ubGFiZWxzLm1hdGNoTGFiZWxzIiAuIHwgbmluZGVudCA2IH19CiAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogcHJpbWFyeQogIHNlcnZpY2VOYW1lOiB7eyBpbmNsdWRlICJteXNxbC5wcmltYXJ5LmZ1bGxuYW1lIiAuIH19CiAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS51cGRhdGVTdHJhdGVneSB9fQogIHVwZGF0ZVN0cmF0ZWd5OiB7ey0gdG9ZYW1sIC5WYWx1ZXMucHJpbWFyeS51cGRhdGVTdHJhdGVneSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0KICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICB7ey0gaWYgKGluY2x1ZGUgIm15c3FsLnByaW1hcnkuY3JlYXRlQ29uZmlnbWFwIiAuKSB9fQogICAgICAgIGNoZWNrc3VtL2NvbmZpZ3VyYXRpb246IHt7IGluY2x1ZGUgKHByaW50ICQuVGVtcGxhdGUuQmFzZVBhdGggIi9wcmltYXJ5L2NvbmZpZ21hcC55YW1sIikgLiB8IHNoYTI1NnN1bSB9fQogICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnBvZEFubm90YXRpb25zIH19CiAgICAgICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS5wb2RBbm5vdGF0aW9ucyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDggfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDggfX0KICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHByaW1hcnkKICAgICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnBvZExhYmVscyB9fQogICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5wcmltYXJ5LnBvZExhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA4IH19CiAgICAgICAge3stIGVuZCB9fQogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiB7eyB0ZW1wbGF0ZSAibXlzcWwuc2VydmljZUFjY291bnROYW1lIiAuIH19CiAgICAgIHt7LSBpbmNsdWRlICJteXNxbC5pbWFnZVB1bGxTZWNyZXRzIiAuIHwgbmluZGVudCA2IH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuaG9zdEFsaWFzZXMgfX0KICAgICAgaG9zdEFsaWFzZXM6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuaG9zdEFsaWFzZXMgImNvbnRleHQiICQpIHwgbmluZGVudCA4IH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5hZmZpbml0eSB9fQogICAgICBhZmZpbml0eToge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS5hZmZpbml0eSAiY29udGV4dCIgJCkgfCBuaW5kZW50IDggfX0KICAgICAge3stIGVsc2UgfX0KICAgICAgYWZmaW5pdHk6CiAgICAgICAgcG9kQWZmaW5pdHk6IHt7LSBpbmNsdWRlICJjb21tb24uYWZmaW5pdGllcy5wb2RzIiAoZGljdCAidHlwZSIgLlZhbHVlcy5wcmltYXJ5LnBvZEFmZmluaXR5UHJlc2V0ICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTAgfX0KICAgICAgICBwb2RBbnRpQWZmaW5pdHk6IHt7LSBpbmNsdWRlICJjb21tb24uYWZmaW5pdGllcy5wb2RzIiAoZGljdCAidHlwZSIgLlZhbHVlcy5wcmltYXJ5LnBvZEFudGlBZmZpbml0eVByZXNldCAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEwIH19CiAgICAgICAgbm9kZUFmZmluaXR5OiB7ey0gaW5jbHVkZSAiY29tbW9uLmFmZmluaXRpZXMubm9kZXMiIChkaWN0ICJ0eXBlIiAuVmFsdWVzLnByaW1hcnkubm9kZUFmZmluaXR5UHJlc2V0LnR5cGUgImtleSIgLlZhbHVlcy5wcmltYXJ5Lm5vZGVBZmZpbml0eVByZXNldC5rZXkgInZhbHVlcyIgLlZhbHVlcy5wcmltYXJ5Lm5vZGVBZmZpbml0eVByZXNldC52YWx1ZXMpIHwgbmluZGVudCAxMCB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkubm9kZVNlbGVjdG9yIH19CiAgICAgIG5vZGVTZWxlY3Rvcjoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS5ub2RlU2VsZWN0b3IgImNvbnRleHQiICQpIHwgbmluZGVudCA4IH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS50b2xlcmF0aW9ucyB9fQogICAgICB0b2xlcmF0aW9uczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS50b2xlcmF0aW9ucyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDggfX0KICAgICAge3stIGVuZCB9fQogICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiB7eyAuVmFsdWVzLnByaW1hcnkucHJpb3JpdHlDbGFzc05hbWUgfCBxdW90ZSB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkucnVudGltZUNsYXNzTmFtZSB9fQogICAgICBydW50aW1lQ2xhc3NOYW1lOiB7eyAuVmFsdWVzLnByaW1hcnkucnVudGltZUNsYXNzTmFtZSB8IHF1b3RlIH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5zY2hlZHVsZXJOYW1lIH19CiAgICAgIHNjaGVkdWxlck5hbWU6IHt7IC5WYWx1ZXMucHJpbWFyeS5zY2hlZHVsZXJOYW1lIHwgcXVvdGUgfX0KICAgICAge3stIGVuZCB9fQogICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnRvcG9sb2d5U3ByZWFkQ29uc3RyYWludHMgfX0KICAgICAgdG9wb2xvZ3lTcHJlYWRDb25zdHJhaW50czoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS50b3BvbG9neVNwcmVhZENvbnN0cmFpbnRzICJjb250ZXh0IiAuKSB8IG5pbmRlbnQgOCB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkucG9kU2VjdXJpdHlDb250ZXh0LmVuYWJsZWQgfX0KICAgICAgc2VjdXJpdHlDb250ZXh0OiB7ey0gb21pdCAuVmFsdWVzLnByaW1hcnkucG9kU2VjdXJpdHlDb250ZXh0ICJlbmFibGVkIiB8IHRvWWFtbCB8IG5pbmRlbnQgOCB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkudGVybWluYXRpb25HcmFjZVBlcmlvZFNlY29uZHMgfX0KICAgICAgdGVybWluYXRpb25HcmFjZVBlcmlvZFNlY29uZHM6IHt7IC5WYWx1ZXMucHJpbWFyeS50ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kcyB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIGluaXRDb250YWluZXJzOgogICAgICAgIHt7LSBpZiBhbmQgLlZhbHVlcy5wcmltYXJ5LnBvZFNlY3VyaXR5Q29udGV4dC5lbmFibGVkIC5WYWx1ZXMudm9sdW1lUGVybWlzc2lvbnMuZW5hYmxlZCAuVmFsdWVzLnByaW1hcnkucGVyc2lzdGVuY2UuZW5hYmxlZCB9fQogICAgICAgIC0gbmFtZTogdm9sdW1lLXBlcm1pc3Npb25zCiAgICAgICAgICBpbWFnZToge3sgaW5jbHVkZSAibXlzcWwudm9sdW1lUGVybWlzc2lvbnMuaW1hZ2UiIC4gfX0KICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy52b2x1bWVQZXJtaXNzaW9ucy5pbWFnZS5wdWxsUG9saWN5IHwgcXVvdGUgfX0KICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgIC0gL2Jpbi9iYXNoCiAgICAgICAgICAgIC0gLWVjCiAgICAgICAgICAgIC0gfAogICAgICAgICAgICAgIG1rZGlyIC1wICIvYml0bmFtaS9teXNxbCIKICAgICAgICAgICAgICBjaG93biAie3sgLlZhbHVlcy5wcmltYXJ5LmNvbnRhaW5lclNlY3VyaXR5Q29udGV4dC5ydW5Bc1VzZXIgfX06e3sgLlZhbHVlcy5wcmltYXJ5LnBvZFNlY3VyaXR5Q29udGV4dC5mc0dyb3VwIH19IiAiL2JpdG5hbWkvbXlzcWwiCiAgICAgICAgICAgICAgZmluZCAiL2JpdG5hbWkvbXlzcWwiIC1taW5kZXB0aCAxIC1tYXhkZXB0aCAxIC1ub3QgLW5hbWUgIi5zbmFwc2hvdCIgLW5vdCAtbmFtZSAibG9zdCtmb3VuZCIgfCB4YXJncyAtciBjaG93biAtUiAie3sgLlZhbHVlcy5wcmltYXJ5LmNvbnRhaW5lclNlY3VyaXR5Q29udGV4dC5ydW5Bc1VzZXIgfX06e3sgLlZhbHVlcy5wcmltYXJ5LnBvZFNlY3VyaXR5Q29udGV4dC5mc0dyb3VwIH19IgogICAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgICBydW5Bc1VzZXI6IDAKICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnZvbHVtZVBlcm1pc3Npb25zLnJlc291cmNlcyB9fQogICAgICAgICAgcmVzb3VyY2VzOiB7ey0gdG9ZYW1sIC5WYWx1ZXMudm9sdW1lUGVybWlzc2lvbnMucmVzb3VyY2VzIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IGRhdGEKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9iaXRuYW1pL215c3FsCiAgICAgICAgICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5wZXJzaXN0ZW5jZS5zdWJQYXRoIH19CiAgICAgICAgICAgICAgc3ViUGF0aDoge3sgLlZhbHVlcy5wcmltYXJ5LnBlcnNpc3RlbmNlLnN1YlBhdGggfX0KICAgICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuaW5pdENvbnRhaW5lcnMgfX0KICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5wcmltYXJ5LmluaXRDb250YWluZXJzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgOCB9fQogICAgICAgIHt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IG15c3FsCiAgICAgICAgICBpbWFnZToge3sgaW5jbHVkZSAibXlzcWwuaW1hZ2UiIC4gfX0KICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5pbWFnZS5wdWxsUG9saWN5IHwgcXVvdGUgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuY29udGFpbmVyU2VjdXJpdHlDb250ZXh0LmVuYWJsZWQgfX0KICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoge3stIG9taXQgLlZhbHVlcy5wcmltYXJ5LmNvbnRhaW5lclNlY3VyaXR5Q29udGV4dCAiZW5hYmxlZCIgfCB0b1lhbWwgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5lbmFibGVkIH19CiAgICAgICAgICBjb21tYW5kOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5jb21tYW5kICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbHNlIGlmIC5WYWx1ZXMucHJpbWFyeS5jb21tYW5kIH19CiAgICAgICAgICBjb21tYW5kOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5wcmltYXJ5LmNvbW1hbmQgImNvbnRleHQiICQpIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGlmIC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuZW5hYmxlZCB9fQogICAgICAgICAgYXJnczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuYXJncyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZWxzZSBpZiAuVmFsdWVzLnByaW1hcnkuYXJncyB9fQogICAgICAgICAgYXJnczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS5hcmdzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkubGlmZWN5Y2xlSG9va3MgfX0KICAgICAgICAgIGxpZmVjeWNsZToge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS5saWZlY3ljbGVIb29rcyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICBlbnY6CiAgICAgICAgICAgIC0gbmFtZTogQklUTkFNSV9ERUJVRwogICAgICAgICAgICAgIHZhbHVlOiB7eyB0ZXJuYXJ5ICJ0cnVlIiAiZmFsc2UiIChvciAuVmFsdWVzLmltYWdlLmRlYnVnIC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuZW5hYmxlZCkgfCBxdW90ZSB9fQogICAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5hdXRoLnVzZVBhc3N3b3JkRmlsZXMgfX0KICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9ST09UX1BBU1NXT1JEX0ZJTEUKICAgICAgICAgICAgICB2YWx1ZToge3sgZGVmYXVsdCAiL29wdC9iaXRuYW1pL215c3FsL3NlY3JldHMvbXlzcWwtcm9vdC1wYXNzd29yZCIgLlZhbHVlcy5hdXRoLmN1c3RvbVBhc3N3b3JkRmlsZXMucm9vdCB9fQogICAgICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX1JPT1RfUEFTU1dPUkQKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBzZWNyZXRLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJteXNxbC5zZWNyZXROYW1lIiAuIH19CiAgICAgICAgICAgICAgICAgIGtleTogbXlzcWwtcm9vdC1wYXNzd29yZAogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBpZiBub3QgKGVtcHR5IC5WYWx1ZXMuYXV0aC51c2VybmFtZSkgfX0KICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9VU0VSCiAgICAgICAgICAgICAgdmFsdWU6IHt7IC5WYWx1ZXMuYXV0aC51c2VybmFtZSB8IHF1b3RlIH19CiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLmF1dGgudXNlUGFzc3dvcmRGaWxlcyB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX1BBU1NXT1JEX0ZJTEUKICAgICAgICAgICAgICB2YWx1ZToge3sgZGVmYXVsdCAiL29wdC9iaXRuYW1pL215c3FsL3NlY3JldHMvbXlzcWwtcGFzc3dvcmQiIC5WYWx1ZXMuYXV0aC5jdXN0b21QYXNzd29yZEZpbGVzLnVzZXIgfX0KICAgICAgICAgICAge3stIGVsc2UgfX0KICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9QQVNTV09SRAogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIHNlY3JldEtleVJlZjoKICAgICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgIm15c3FsLnNlY3JldE5hbWUiIC4gfX0KICAgICAgICAgICAgICAgICAga2V5OiBteXNxbC1wYXNzd29yZAogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgICAge3stIGlmIGFuZCAuVmFsdWVzLmF1dGguY3JlYXRlRGF0YWJhc2UgLlZhbHVlcy5hdXRoLmRhdGFiYXNlIH19CiAgICAgICAgICAgIC0gbmFtZTogTVlTUUxfREFUQUJBU0UKICAgICAgICAgICAgICB2YWx1ZToge3sgLlZhbHVlcy5hdXRoLmRhdGFiYXNlIHwgcXVvdGUgfX0KICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICB7ey0gaWYgZXEgLlZhbHVlcy5hcmNoaXRlY3R1cmUgInJlcGxpY2F0aW9uIiB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX1JFUExJQ0FUSU9OX01PREUKICAgICAgICAgICAgICB2YWx1ZTogIm1hc3RlciIKICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9SRVBMSUNBVElPTl9VU0VSCiAgICAgICAgICAgICAgdmFsdWU6IHt7IC5WYWx1ZXMuYXV0aC5yZXBsaWNhdGlvblVzZXIgfCBxdW90ZSB9fQogICAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5hdXRoLnVzZVBhc3N3b3JkRmlsZXMgfX0KICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9SRVBMSUNBVElPTl9QQVNTV09SRF9GSUxFCiAgICAgICAgICAgICAgdmFsdWU6IHt7IGRlZmF1bHQgIi9vcHQvYml0bmFtaS9teXNxbC9zZWNyZXRzL215c3FsLXJlcGxpY2F0aW9uLXBhc3N3b3JkIiAuVmFsdWVzLmF1dGguY3VzdG9tUGFzc3dvcmRGaWxlcy5yZXBsaWNhdG9yIH19CiAgICAgICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICAgIC0gbmFtZTogTVlTUUxfUkVQTElDQVRJT05fUEFTU1dPUkQKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBzZWNyZXRLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJteXNxbC5zZWNyZXROYW1lIiAuIH19CiAgICAgICAgICAgICAgICAgIGtleTogbXlzcWwtcmVwbGljYXRpb24tcGFzc3dvcmQKICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuZXh0cmFGbGFncyB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX0VYVFJBX0ZMQUdTCiAgICAgICAgICAgICAgdmFsdWU6ICJ7eyAuVmFsdWVzLnByaW1hcnkuZXh0cmFGbGFncyB9fSIKICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LmV4dHJhRW52VmFycyB9fQogICAgICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5wcmltYXJ5LmV4dHJhRW52VmFycyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIGVudkZyb206CiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuZXh0cmFFbnZWYXJzQ00gfX0KICAgICAgICAgICAgLSBjb25maWdNYXBSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuZXh0cmFFbnZWYXJzQ00gImNvbnRleHQiICQpIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5leHRyYUVudlZhcnNTZWNyZXQgfX0KICAgICAgICAgICAgLSBzZWNyZXRSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuZXh0cmFFbnZWYXJzU2VjcmV0ICJjb250ZXh0IiAkKSB9fQogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgLSBuYW1lOiBteXNxbAogICAgICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDMzMDYKICAgICAgICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5leHRyYVBvcnRzIH19CiAgICAgICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuZXh0cmFQb3J0cyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiBub3QgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5lbmFibGVkIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LmN1c3RvbUxpdmVuZXNzUHJvYmUgfX0KICAgICAgICAgIGxpdmVuZXNzUHJvYmU6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuY3VzdG9tTGl2ZW5lc3NQcm9iZSAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZWxzZSBpZiAuVmFsdWVzLnByaW1hcnkubGl2ZW5lc3NQcm9iZS5lbmFibGVkIH19CiAgICAgICAgICBsaXZlbmVzc1Byb2JlOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgKG9taXQgLlZhbHVlcy5wcmltYXJ5LmxpdmVuZXNzUHJvYmUgImVuYWJsZWQiKSAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAgIC0gL2Jpbi9iYXNoCiAgICAgICAgICAgICAgICAtIC1lYwogICAgICAgICAgICAgICAgLSB8CiAgICAgICAgICAgICAgICAgIHBhc3N3b3JkX2F1eD0iJHtNWVNRTF9ST09UX1BBU1NXT1JEOi19IgogICAgICAgICAgICAgICAgICBpZiBbWyAtZiAiJHtNWVNRTF9ST09UX1BBU1NXT1JEX0ZJTEU6LX0iIF1dOyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZF9hdXg9JChjYXQgIiRNWVNRTF9ST09UX1BBU1NXT1JEX0ZJTEUiKQogICAgICAgICAgICAgICAgICBmaQogICAgICAgICAgICAgICAgICBteXNxbGFkbWluIHN0YXR1cyAtdXJvb3QgLXAiJHtwYXNzd29yZF9hdXh9IgogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5jdXN0b21SZWFkaW5lc3NQcm9iZSB9fQogICAgICAgICAgcmVhZGluZXNzUHJvYmU6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuY3VzdG9tUmVhZGluZXNzUHJvYmUgImNvbnRleHQiICQpIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVsc2UgaWYgLlZhbHVlcy5wcmltYXJ5LnJlYWRpbmVzc1Byb2JlLmVuYWJsZWQgfX0KICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgKG9taXQgLlZhbHVlcy5wcmltYXJ5LnJlYWRpbmVzc1Byb2JlICJlbmFibGVkIikgImNvbnRleHQiICQpIHwgbmluZGVudCAxMiB9fQogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgICAtIC9iaW4vYmFzaAogICAgICAgICAgICAgICAgLSAtZWMKICAgICAgICAgICAgICAgIC0gfAogICAgICAgICAgICAgICAgICBwYXNzd29yZF9hdXg9IiR7TVlTUUxfUk9PVF9QQVNTV09SRDotfSIKICAgICAgICAgICAgICAgICAgaWYgW1sgLWYgIiR7TVlTUUxfUk9PVF9QQVNTV09SRF9GSUxFOi19IiBdXTsgdGhlbgogICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSQoY2F0ICIkTVlTUUxfUk9PVF9QQVNTV09SRF9GSUxFIikKICAgICAgICAgICAgICAgICAgZmkKICAgICAgICAgICAgICAgICAgbXlzcWxhZG1pbiBzdGF0dXMgLXVyb290IC1wIiR7cGFzc3dvcmRfYXV4fSIKICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuY3VzdG9tU3RhcnR1cFByb2JlIH19CiAgICAgICAgICBzdGFydHVwUHJvYmU6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuY3VzdG9tU3RhcnR1cFByb2JlICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbHNlIGlmIC5WYWx1ZXMucHJpbWFyeS5zdGFydHVwUHJvYmUuZW5hYmxlZCB9fQogICAgICAgICAgc3RhcnR1cFByb2JlOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgKG9taXQgLlZhbHVlcy5wcmltYXJ5LnN0YXJ0dXBQcm9iZSAiZW5hYmxlZCIpICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgICAgLSAvYmluL2Jhc2gKICAgICAgICAgICAgICAgIC0gLWVjCiAgICAgICAgICAgICAgICAtIHwKICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSIke01ZU1FMX1JPT1RfUEFTU1dPUkQ6LX0iCiAgICAgICAgICAgICAgICAgIGlmIFtbIC1mICIke01ZU1FMX1JPT1RfUEFTU1dPUkRfRklMRTotfSIgXV07IHRoZW4KICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkX2F1eD0kKGNhdCAiJE1ZU1FMX1JPT1RfUEFTU1dPUkRfRklMRSIpCiAgICAgICAgICAgICAgICAgIGZpCiAgICAgICAgICAgICAgICAgIG15c3FsYWRtaW4gc3RhdHVzIC11cm9vdCAtcCIke3Bhc3N3b3JkX2F1eH0iCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnJlc291cmNlcyB9fQogICAgICAgICAgcmVzb3VyY2VzOiB7eyB0b1lhbWwgLlZhbHVlcy5wcmltYXJ5LnJlc291cmNlcyB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBkYXRhCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvYml0bmFtaS9teXNxbAogICAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkucGVyc2lzdGVuY2Uuc3ViUGF0aCB9fQogICAgICAgICAgICAgIHN1YlBhdGg6IHt7IC5WYWx1ZXMucHJpbWFyeS5wZXJzaXN0ZW5jZS5zdWJQYXRoIH19CiAgICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICB7ey0gaWYgb3IgLlZhbHVlcy5pbml0ZGJTY3JpcHRzQ29uZmlnTWFwIC5WYWx1ZXMuaW5pdGRiU2NyaXB0cyB9fQogICAgICAgICAgICAtIG5hbWU6IGN1c3RvbS1pbml0LXNjcmlwdHMKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9kb2NrZXItZW50cnlwb2ludC1pbml0ZGIuZAogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBpZiBvciAuVmFsdWVzLnByaW1hcnkuY29uZmlndXJhdGlvbiAuVmFsdWVzLnByaW1hcnkuZXhpc3RpbmdDb25maWdtYXAgfX0KICAgICAgICAgICAgLSBuYW1lOiBjb25maWcKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9vcHQvYml0bmFtaS9teXNxbC9jb25mL215LmNuZgogICAgICAgICAgICAgIHN1YlBhdGg6IG15LmNuZgogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBpZiBhbmQgLlZhbHVlcy5hdXRoLnVzZVBhc3N3b3JkRmlsZXMgKG5vdCAuVmFsdWVzLmF1dGguY3VzdG9tUGFzc3dvcmRGaWxlcykgfX0KICAgICAgICAgICAgLSBuYW1lOiBteXNxbC1jcmVkZW50aWFscwogICAgICAgICAgICAgIG1vdW50UGF0aDogL29wdC9iaXRuYW1pL215c3FsL3NlY3JldHMvCiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5leHRyYVZvbHVtZU1vdW50cyB9fQogICAgICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5wcmltYXJ5LmV4dHJhVm9sdW1lTW91bnRzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3MuZW5hYmxlZCB9fQogICAgICAgIC0gbmFtZTogbWV0cmljcwogICAgICAgICAgaW1hZ2U6IHt7IGluY2x1ZGUgIm15c3FsLm1ldHJpY3MuaW1hZ2UiIC4gfX0KICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5tZXRyaWNzLmltYWdlLnB1bGxQb2xpY3kgfCBxdW90ZSB9fQogICAgICAgICAge3stIGlmIC5WYWx1ZXMubWV0cmljcy5jb250YWluZXJTZWN1cml0eUNvbnRleHQuZW5hYmxlZCB9fQogICAgICAgICAgc2VjdXJpdHlDb250ZXh0OiB7ey0gb21pdCAuVmFsdWVzLm1ldHJpY3MuY29udGFpbmVyU2VjdXJpdHlDb250ZXh0ICJlbmFibGVkIiB8IHRvWWFtbCB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIGVudjoKICAgICAgICAgICAge3stIGlmIC5WYWx1ZXMuYXV0aC51c2VQYXNzd29yZEZpbGVzIH19CiAgICAgICAgICAgIC0gbmFtZTogTVlTUUxfUk9PVF9QQVNTV09SRF9GSUxFCiAgICAgICAgICAgICAgdmFsdWU6IHt7IGRlZmF1bHQgIi9vcHQvYml0bmFtaS9teXNxbGQtZXhwb3J0ZXIvc2VjcmV0cy9teXNxbC1yb290LXBhc3N3b3JkIiAuVmFsdWVzLmF1dGguY3VzdG9tUGFzc3dvcmRGaWxlcy5yb290IH19CiAgICAgICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICAgIC0gbmFtZTogTVlTUUxfUk9PVF9QQVNTV09SRAogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIHNlY3JldEtleVJlZjoKICAgICAgICAgICAgICAgICAgbmFtZToge3sgaW5jbHVkZSAibXlzcWwuc2VjcmV0TmFtZSIgLiB9fQogICAgICAgICAgICAgICAgICBrZXk6IG15c3FsLXJvb3QtcGFzc3dvcmQKICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGlmIC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuZW5hYmxlZCB9fQogICAgICAgICAgY29tbWFuZDoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuY29tbWFuZCAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICBhcmdzOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5hcmdzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbHNlIH19CiAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAtIC9iaW4vYmFzaAogICAgICAgICAgICAtIC1lYwogICAgICAgICAgICAtIHwKICAgICAgICAgICAgICBwYXNzd29yZF9hdXg9IiR7TVlTUUxfUk9PVF9QQVNTV09SRDotfSIKICAgICAgICAgICAgICBpZiBbWyAtZiAiJHtNWVNRTF9ST09UX1BBU1NXT1JEX0ZJTEU6LX0iIF1dOyB0aGVuCiAgICAgICAgICAgICAgICAgIHBhc3N3b3JkX2F1eD0kKGNhdCAiJE1ZU1FMX1JPT1RfUEFTU1dPUkRfRklMRSIpCiAgICAgICAgICAgICAgZmkKICAgICAgICAgICAgICBEQVRBX1NPVVJDRV9OQU1FPSJyb290OiR7cGFzc3dvcmRfYXV4fUAobG9jYWxob3N0OjMzMDYpLyIgL2Jpbi9teXNxbGRfZXhwb3J0ZXIge3stIHJhbmdlIC5WYWx1ZXMubWV0cmljcy5leHRyYUFyZ3MucHJpbWFyeSB9fSB7eyAuIH19IHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIG5hbWU6IG1ldHJpY3MKICAgICAgICAgICAgICBjb250YWluZXJQb3J0OiA5MTA0CiAgICAgICAgICB7ey0gaWYgbm90IC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuZW5hYmxlZCB9fQogICAgICAgICAge3stIGlmIC5WYWx1ZXMubWV0cmljcy5saXZlbmVzc1Byb2JlLmVuYWJsZWQgfX0KICAgICAgICAgIGxpdmVuZXNzUHJvYmU6IHt7LSBvbWl0IC5WYWx1ZXMubWV0cmljcy5saXZlbmVzc1Byb2JlICJlbmFibGVkIiB8IHRvWWFtbCB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvbWV0cmljcwogICAgICAgICAgICAgIHBvcnQ6IG1ldHJpY3MKICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3MucmVhZGluZXNzUHJvYmUuZW5hYmxlZCB9fQogICAgICAgICAgcmVhZGluZXNzUHJvYmU6IHt7LSBvbWl0IC5WYWx1ZXMubWV0cmljcy5yZWFkaW5lc3NQcm9iZSAiZW5hYmxlZCIgfCB0b1lhbWwgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgICAgcGF0aDogL21ldHJpY3MKICAgICAgICAgICAgICBwb3J0OiBtZXRyaWNzCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5tZXRyaWNzLnJlc291cmNlcyB9fQogICAgICAgICAgcmVzb3VyY2VzOiB7ey0gdG9ZYW1sIC5WYWx1ZXMubWV0cmljcy5yZXNvdXJjZXMgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgYW5kIC5WYWx1ZXMuYXV0aC51c2VQYXNzd29yZEZpbGVzIChub3QgLlZhbHVlcy5hdXRoLmN1c3RvbVBhc3N3b3JkRmlsZXMpIH19CiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogbXlzcWwtY3JlZGVudGlhbHMKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9vcHQvYml0bmFtaS9teXNxbGQtZXhwb3J0ZXIvc2VjcmV0cy8KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5zaWRlY2FycyB9fQogICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuc2lkZWNhcnMgImNvbnRleHQiICQpIHwgbmluZGVudCA4IH19CiAgICAgICAge3stIGVuZCB9fQogICAgICB2b2x1bWVzOgogICAgICAgIHt7LSBpZiBvciAuVmFsdWVzLnByaW1hcnkuY29uZmlndXJhdGlvbiAuVmFsdWVzLnByaW1hcnkuZXhpc3RpbmdDb25maWdtYXAgfX0KICAgICAgICAtIG5hbWU6IGNvbmZpZwogICAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgICBuYW1lOiB7eyBpbmNsdWRlICJteXNxbC5wcmltYXJ5LmNvbmZpZ21hcE5hbWUiIC4gfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGlmIG9yIC5WYWx1ZXMuaW5pdGRiU2NyaXB0c0NvbmZpZ01hcCAuVmFsdWVzLmluaXRkYlNjcmlwdHMgfX0KICAgICAgICAtIG5hbWU6IGN1c3RvbS1pbml0LXNjcmlwdHMKICAgICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgICAgbmFtZToge3sgaW5jbHVkZSAibXlzcWwuaW5pdGRiU2NyaXB0c0NNIiAuIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBpZiBhbmQgLlZhbHVlcy5hdXRoLnVzZVBhc3N3b3JkRmlsZXMgKG5vdCAuVmFsdWVzLmF1dGguY3VzdG9tUGFzc3dvcmRGaWxlcykgfX0KICAgICAgICAtIG5hbWU6IG15c3FsLWNyZWRlbnRpYWxzCiAgICAgICAgICBzZWNyZXQ6CiAgICAgICAgICAgIHNlY3JldE5hbWU6IHt7IGluY2x1ZGUgIm15c3FsLnNlY3JldE5hbWUiIC4gfX0KICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgLSBrZXk6IG15c3FsLXJvb3QtcGFzc3dvcmQKICAgICAgICAgICAgICAgIHBhdGg6IG15c3FsLXJvb3QtcGFzc3dvcmQKICAgICAgICAgICAgICAtIGtleTogbXlzcWwtcGFzc3dvcmQKICAgICAgICAgICAgICAgIHBhdGg6IG15c3FsLXBhc3N3b3JkCiAgICAgICAgICAgICAge3stIGlmIGVxIC5WYWx1ZXMuYXJjaGl0ZWN0dXJlICJyZXBsaWNhdGlvbiIgfX0KICAgICAgICAgICAgICAtIGtleTogbXlzcWwtcmVwbGljYXRpb24tcGFzc3dvcmQKICAgICAgICAgICAgICAgIHBhdGg6IG15c3FsLXJlcGxpY2F0aW9uLXBhc3N3b3JkCiAgICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LmV4dHJhVm9sdW1lcyB9fQogICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuZXh0cmFWb2x1bWVzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgOCB9fQogICAgICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgYW5kIC5WYWx1ZXMucHJpbWFyeS5wZXJzaXN0ZW5jZS5lbmFibGVkIC5WYWx1ZXMucHJpbWFyeS5wZXJzaXN0ZW5jZS5leGlzdGluZ0NsYWltIH19CiAgICAgICAgLSBuYW1lOiBkYXRhCiAgICAgICAgICBwZXJzaXN0ZW50Vm9sdW1lQ2xhaW06CiAgICAgICAgICAgIGNsYWltTmFtZToge3sgdHBsIC5WYWx1ZXMucHJpbWFyeS5wZXJzaXN0ZW5jZS5leGlzdGluZ0NsYWltIC4gfX0KICB7ey0gZWxzZSBpZiBub3QgLlZhbHVlcy5wcmltYXJ5LnBlcnNpc3RlbmNlLmVuYWJsZWQgfX0KICAgICAgICAtIG5hbWU6IGRhdGEKICAgICAgICAgIGVtcHR5RGlyOiB7fQogIHt7LSBlbHNlIGlmIGFuZCAuVmFsdWVzLnByaW1hcnkucGVyc2lzdGVuY2UuZW5hYmxlZCAobm90IC5WYWx1ZXMucHJpbWFyeS5wZXJzaXN0ZW5jZS5leGlzdGluZ0NsYWltKSB9fQogIHZvbHVtZUNsYWltVGVtcGxhdGVzOgogICAgLSBtZXRhZGF0YToKICAgICAgICBuYW1lOiBkYXRhCiAgICAgICAgbGFiZWxzOiB7eyBpbmNsdWRlICJjb21tb24ubGFiZWxzLm1hdGNoTGFiZWxzIiAuIHwgbmluZGVudCAxMCB9fQogICAgICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50OiBwcmltYXJ5CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5jb21tb25MYWJlbHMgfX0KICAgICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEwIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnBlcnNpc3RlbmNlLmFubm90YXRpb25zIH19CiAgICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5wcmltYXJ5LnBlcnNpc3RlbmNlLmFubm90YXRpb25zICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTAgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zIH19CiAgICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEwIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgIHNwZWM6CiAgICAgICAgYWNjZXNzTW9kZXM6CiAgICAgICAgICB7ey0gcmFuZ2UgLlZhbHVlcy5wcmltYXJ5LnBlcnNpc3RlbmNlLmFjY2Vzc01vZGVzIH19CiAgICAgICAgICAtIHt7IC4gfCBxdW90ZSB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgIHJlc291cmNlczoKICAgICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgICBzdG9yYWdlOiB7eyAuVmFsdWVzLnByaW1hcnkucGVyc2lzdGVuY2Uuc2l6ZSB8IHF1b3RlIH19CiAgICAgICAge3stIGluY2x1ZGUgImNvbW1vbi5zdG9yYWdlLmNsYXNzIiAoZGljdCAicGVyc2lzdGVuY2UiIC5WYWx1ZXMucHJpbWFyeS5wZXJzaXN0ZW5jZSAiZ2xvYmFsIiAuVmFsdWVzLmdsb2JhbCkgfCBuaW5kZW50IDggfX0KICAgICAgICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnBlcnNpc3RlbmNlLnNlbGVjdG9yIH19CiAgICAgICAgc2VsZWN0b3I6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkucGVyc2lzdGVuY2Uuc2VsZWN0b3IgImNvbnRleHQiICQpIHwgbmluZGVudCAxMCB9fQogICAgICAgIHt7LSBlbmQgLX19CiAge3stIGVuZCB9fQo="
      },
      {
        "name": "templates/primary/svc-headless.yaml",
        "data": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJteXNxbC5wcmltYXJ5LmZ1bGxuYW1lIiAuIH19LWhlYWRsZXNzCiAgbmFtZXNwYWNlOiB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIHwgcXVvdGUgfX0KICBsYWJlbHM6IHt7LSBpbmNsdWRlICJjb21tb24ubGFiZWxzLnN0YW5kYXJkIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHByaW1hcnkKICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkxhYmVscyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAge3stIGlmIG9yIC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLmhlYWRsZXNzLmFubm90YXRpb25zIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuc2VydmljZS5oZWFkbGVzcy5hbm5vdGF0aW9ucyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLmhlYWRsZXNzLmFubm90YXRpb25zICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAge3stIGVuZCB9fQpzcGVjOgogIHR5cGU6IENsdXN0ZXJJUAogIGNsdXN0ZXJJUDogTm9uZQogIHB1Ymxpc2hOb3RSZWFkeUFkZHJlc3NlczogdHJ1ZQogIHBvcnRzOgogICAgLSBuYW1lOiBteXNxbAogICAgICBwb3J0OiB7eyAuVmFsdWVzLnByaW1hcnkuc2VydmljZS5wb3J0cy5teXNxbCB9fQogICAgICB0YXJnZXRQb3J0OiBteXNxbAogIHNlbGVjdG9yOiB7eyBpbmNsdWRlICJjb21tb24ubGFiZWxzLm1hdGNoTGFiZWxzIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHByaW1hcnkK"
      },
      {
        "name": "templates/primary/svc.yaml",
        "data": "YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJteXNxbC5wcmltYXJ5LmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIHwgcXVvdGUgfX0KICBsYWJlbHM6IHt7LSBpbmNsdWRlICJjb21tb24ubGFiZWxzLnN0YW5kYXJkIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHByaW1hcnkKICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkxhYmVscyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAgYW5ub3RhdGlvbnM6CiAgICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuc2VydmljZS5hbm5vdGF0aW9ucyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgdHlwZToge3sgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2UudHlwZSB9fQogIHt7LSBpZiBhbmQgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2UuY2x1c3RlcklQIChlcSAuVmFsdWVzLnByaW1hcnkuc2VydmljZS50eXBlICJDbHVzdGVySVAiKSB9fQogIGNsdXN0ZXJJUDoge3sgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2UuY2x1c3RlcklQIH19CiAge3stIGVuZCB9fQogIHt7LSBpZiAuVmFsdWVzLnByaW1hcnkuc2VydmljZS5zZXNzaW9uQWZmaW5pdHkgfX0KICBzZXNzaW9uQWZmaW5pdHk6IHt7IC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLnNlc3Npb25BZmZpbml0eSB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2Uuc2Vzc2lvbkFmZmluaXR5Q29uZmlnIH19CiAgc2Vzc2lvbkFmZmluaXR5Q29uZmlnOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2Uuc2Vzc2lvbkFmZmluaXR5Q29uZmlnICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgb3IgKGVxIC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLnR5cGUgIkxvYWRCYWxhbmNlciIpIChlcSAuVmFsdWVzLnByaW1hcnkuc2VydmljZS50eXBlICJOb2RlUG9ydCIpIH19CiAgZXh0ZXJuYWxUcmFmZmljUG9saWN5OiB7eyAuVmFsdWVzLnByaW1hcnkuc2VydmljZS5leHRlcm5hbFRyYWZmaWNQb2xpY3kgfCBxdW90ZSB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgYW5kIChlcSAuVmFsdWVzLnByaW1hcnkuc2VydmljZS50eXBlICJMb2FkQmFsYW5jZXIiKSAobm90IChlbXB0eSAuVmFsdWVzLnByaW1hcnkuc2VydmljZS5sb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXMpKSB9fQogIGxvYWRCYWxhbmNlclNvdXJjZVJhbmdlczoge3sgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2UubG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIH19CiAge3stIGVuZCB9fQogIHt7LSBpZiBhbmQgKGVxIC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLnR5cGUgIkxvYWRCYWxhbmNlciIpIChub3QgKGVtcHR5IC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLmxvYWRCYWxhbmNlcklQKSkgfX0KICBsb2FkQmFsYW5jZXJJUDoge3sgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2UubG9hZEJhbGFuY2VySVAgfX0KICB7ey0gZW5kIH19CiAgcG9ydHM6CiAgICAtIG5hbWU6IG15c3FsCiAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLnBvcnRzLm15c3FsIH19CiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgdGFyZ2V0UG9ydDogbXlzcWwKICAgICAge3stIGlmIChhbmQgKG9yIChlcSAuVmFsdWVzLnByaW1hcnkuc2VydmljZS50eXBlICJOb2RlUG9ydCIpIChlcSAuVmFsdWVzLnByaW1hcnkuc2VydmljZS50eXBlICJMb2FkQmFsYW5jZXIiKSkgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2Uubm9kZVBvcnRzLm15c3FsKSB9fQogICAgICBub2RlUG9ydDoge3sgLlZhbHVlcy5wcmltYXJ5LnNlcnZpY2Uubm9kZVBvcnRzLm15c3FsIH19CiAgICAgIHt7LSBlbHNlIGlmIGVxIC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLnR5cGUgIkNsdXN0ZXJJUCIgfX0KICAgICAgbm9kZVBvcnQ6IG51bGwKICAgICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLmV4dHJhUG9ydHMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnByaW1hcnkuc2VydmljZS5leHRyYVBvcnRzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogIHNlbGVjdG9yOiB7eyBpbmNsdWRlICJjb21tb24ubGFiZWxzLm1hdGNoTGFiZWxzIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHByaW1hcnkK"
      },
      {
        "name": "templates/prometheusrule.yaml",
        "data": "e3stIGlmIGFuZCAuVmFsdWVzLm1ldHJpY3MuZW5hYmxlZCAuVmFsdWVzLm1ldHJpY3MucHJvbWV0aGV1c1J1bGUuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBtb25pdG9yaW5nLmNvcmVvcy5jb20vdjEKa2luZDogUHJvbWV0aGV1c1J1bGUKbWV0YWRhdGE6CiAgbmFtZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyBkZWZhdWx0IC5SZWxlYXNlLk5hbWVzcGFjZSAuVmFsdWVzLm1ldHJpY3MucHJvbWV0aGV1c1J1bGUubmFtZXNwYWNlIH19CiAgbGFiZWxzOiB7ey0gaW5jbHVkZSAiY29tbW9uLmxhYmVscy5zdGFuZGFyZCIgLiB8IG5pbmRlbnQgNCB9fQogICAgYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50OiBtZXRyaWNzCiAgICB7ey0gaWYgLlZhbHVlcy5jb21tb25MYWJlbHMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5jb21tb25MYWJlbHMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMubWV0cmljcy5wcm9tZXRoZXVzUnVsZS5hZGRpdGlvbmFsTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMubWV0cmljcy5wcm9tZXRoZXVzUnVsZS5hZGRpdGlvbmFsTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0Kc3BlYzoKICBncm91cHM6CiAgLSBuYW1lOiB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMuZnVsbG5hbWUiIC4gfX0KICAgIHJ1bGVzOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMubWV0cmljcy5wcm9tZXRoZXVzUnVsZS5ydWxlcyAiY29udGV4dCIgJCApIHwgbmluZGVudCA2IH19Cnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/role.yaml",
        "data": "e3stIGlmIGFuZCAuVmFsdWVzLnNlcnZpY2VBY2NvdW50LmNyZWF0ZSAgLlZhbHVlcy5yYmFjLmNyZWF0ZSB9fQphcGlWZXJzaW9uOiB7eyBpbmNsdWRlICJjb21tb24uY2FwYWJpbGl0aWVzLnJiYWMuYXBpVmVyc2lvbiIgLiB9fQpraW5kOiBSb2xlCm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5mdWxsbmFtZSIgLiB9fQogIG5hbWVzcGFjZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB8IHF1b3RlIH19CiAgbGFiZWxzOiB7ey0gaW5jbHVkZSAiY29tbW9uLmxhYmVscy5zdGFuZGFyZCIgLiB8IG5pbmRlbnQgNCB9fQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0KcnVsZXM6CiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBlbmRwb2ludHMKICAgIHZlcmJzOgogICAgICAtIGdldAogIHt7LSBpZiAuVmFsdWVzLnJiYWMucnVsZXMgfX0KICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMucmJhYy5ydWxlcyAiY29udGV4dCIgJCApIHwgbmluZGVudCAyIH19CiAge3stIGVuZCB9fQp7ey0gZW5kIH19Cg=="
      },
      {
        "name": "templates/rolebinding.yaml",
        "data": "e3stIGlmIGFuZCAuVmFsdWVzLnNlcnZpY2VBY2NvdW50LmNyZWF0ZSAuVmFsdWVzLnJiYWMuY3JlYXRlIH19CmtpbmQ6IFJvbGVCaW5kaW5nCmFwaVZlcnNpb246IHt7IGluY2x1ZGUgImNvbW1vbi5jYXBhYmlsaXRpZXMucmJhYy5hcGlWZXJzaW9uIiAuIH19Cm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5mdWxsbmFtZSIgLiB9fQogIG5hbWVzcGFjZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB8IHF1b3RlIH19CiAgbGFiZWxzOiB7ey0gaW5jbHVkZSAiY29tbW9uLmxhYmVscy5zdGFuZGFyZCIgLiB8IG5pbmRlbnQgNCB9fQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0Kc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZToge3sgaW5jbHVkZSAibXlzcWwuc2VydmljZUFjY291bnROYW1lIiAuIH19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuIC19fQp7ey0gZW5kIH19Cg=="
      },
      {
        "name": "templates/secondary/configmap.yaml",
        "data": "e3stIGlmIChpbmNsdWRlICJteXNxbC5zZWNvbmRhcnkuY3JlYXRlQ29uZmlnbWFwIiAuKSB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZToge3sgaW5jbHVkZSAibXlzcWwuc2Vjb25kYXJ5LmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIHwgcXVvdGUgfX0KICBsYWJlbHM6IHt7LSBpbmNsdWRlICJjb21tb24ubGFiZWxzLnN0YW5kYXJkIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHNlY29uZGFyeQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0KZGF0YToKICBteS5jbmY6IHwtCiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LmNvbmZpZ3VyYXRpb24gImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQp7ey0gZW5kIC19fQo="
      },
      {
        "name": "templates/secondary/pdb.yaml",
        "data": "e3stIGlmIGFuZCAoZXEgLlZhbHVlcy5hcmNoaXRlY3R1cmUgInJlcGxpY2F0aW9uIikgLlZhbHVlcy5zZWNvbmRhcnkucGRiLmNyZWF0ZSB9fQphcGlWZXJzaW9uOiB7eyBpbmNsdWRlICJjb21tb24uY2FwYWJpbGl0aWVzLnBvbGljeS5hcGlWZXJzaW9uIiAuIH19CmtpbmQ6IFBvZERpc3J1cHRpb25CdWRnZXQKbWV0YWRhdGE6CiAgbmFtZToge3sgaW5jbHVkZSAibXlzcWwuc2Vjb25kYXJ5LmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuIHwgcXVvdGUgfX0KICBsYWJlbHM6IHt7LSBpbmNsdWRlICJjb21tb24ubGFiZWxzLnN0YW5kYXJkIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHNlY29uZGFyeQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0Kc3BlYzoKICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkucGRiLm1pbkF2YWlsYWJsZSB9fQogIG1pbkF2YWlsYWJsZToge3sgLlZhbHVlcy5zZWNvbmRhcnkucGRiLm1pbkF2YWlsYWJsZSB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkucGRiLm1heFVuYXZhaWxhYmxlIH19CiAgbWF4VW5hdmFpbGFibGU6IHt7IC5WYWx1ZXMuc2Vjb25kYXJ5LnBkYi5tYXhVbmF2YWlsYWJsZSB9fQogIHt7LSBlbmQgfX0KICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOiB7eyBpbmNsdWRlICJjb21tb24ubGFiZWxzLm1hdGNoTGFiZWxzIiAuIHwgbmluZGVudCA2IH19CiAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogc2Vjb25kYXJ5Cnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/secondary/statefulset.yaml",
        "data": "e3stIGlmIGVxIC5WYWx1ZXMuYXJjaGl0ZWN0dXJlICJyZXBsaWNhdGlvbiIgfX0KYXBpVmVyc2lvbjoge3sgaW5jbHVkZSAiY29tbW9uLmNhcGFiaWxpdGllcy5zdGF0ZWZ1bHNldC5hcGlWZXJzaW9uIiAuIH19CmtpbmQ6IFN0YXRlZnVsU2V0Cm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgIm15c3FsLnNlY29uZGFyeS5mdWxsbmFtZSIgLiB9fQogIG5hbWVzcGFjZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB8IHF1b3RlIH19CiAgbGFiZWxzOiB7ey0gaW5jbHVkZSAiY29tbW9uLmxhYmVscy5zdGFuZGFyZCIgLiB8IG5pbmRlbnQgNCB9fQogICAgYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50OiBzZWNvbmRhcnkKICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkxhYmVscyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CnNwZWM6CiAgcmVwbGljYXM6IHt7IC5WYWx1ZXMuc2Vjb25kYXJ5LnJlcGxpY2FDb3VudCB9fQogIHBvZE1hbmFnZW1lbnRQb2xpY3k6IHt7IC5WYWx1ZXMuc2Vjb25kYXJ5LnBvZE1hbmFnZW1lbnRQb2xpY3kgfCBxdW90ZSB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6IHt7IGluY2x1ZGUgImNvbW1vbi5sYWJlbHMubWF0Y2hMYWJlbHMiIC4gfCBuaW5kZW50IDYgfX0KICAgICAgYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50OiBzZWNvbmRhcnkKICBzZXJ2aWNlTmFtZToge3sgaW5jbHVkZSAibXlzcWwuc2Vjb25kYXJ5LmZ1bGxuYW1lIiAuIH19CiAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnVwZGF0ZVN0cmF0ZWd5IH19CiAgdXBkYXRlU3RyYXRlZ3k6IHt7LSB0b1lhbWwgLlZhbHVlcy5zZWNvbmRhcnkudXBkYXRlU3RyYXRlZ3kgfCBuaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAge3stIGlmIChpbmNsdWRlICJteXNxbC5zZWNvbmRhcnkuY3JlYXRlQ29uZmlnbWFwIiAuKSB9fQogICAgICAgIGNoZWNrc3VtL2NvbmZpZ3VyYXRpb246IHt7IGluY2x1ZGUgKHByaW50ICQuVGVtcGxhdGUuQmFzZVBhdGggIi9zZWNvbmRhcnkvY29uZmlnbWFwLnlhbWwiKSAuIHwgc2hhMjU2c3VtIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5wb2RBbm5vdGF0aW9ucyB9fQogICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5wb2RBbm5vdGF0aW9ucyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDggfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDggfX0KICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHNlY29uZGFyeQogICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5wb2RMYWJlbHMgfX0KICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LnBvZExhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA4IH19CiAgICAgICAge3stIGVuZCB9fQogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiB7eyBpbmNsdWRlICJteXNxbC5zZXJ2aWNlQWNjb3VudE5hbWUiIC4gfX0KICAgICAge3stIGluY2x1ZGUgIm15c3FsLmltYWdlUHVsbFNlY3JldHMiIC4gfCBuaW5kZW50IDYgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5Lmhvc3RBbGlhc2VzIH19CiAgICAgIGhvc3RBbGlhc2VzOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkuaG9zdEFsaWFzZXMgImNvbnRleHQiICQpIHwgbmluZGVudCA4IH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LmFmZmluaXR5IH19CiAgICAgIGFmZmluaXR5OiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkuYWZmaW5pdHkgImNvbnRleHQiICQpIHwgbmluZGVudCA4IH19CiAgICAgIHt7LSBlbHNlIH19CiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFmZmluaXR5OiB7ey0gaW5jbHVkZSAiY29tbW9uLmFmZmluaXRpZXMucG9kcyIgKGRpY3QgInR5cGUiIC5WYWx1ZXMuc2Vjb25kYXJ5LnBvZEFmZmluaXR5UHJlc2V0ICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTAgfX0KICAgICAgICBwb2RBbnRpQWZmaW5pdHk6IHt7LSBpbmNsdWRlICJjb21tb24uYWZmaW5pdGllcy5wb2RzIiAoZGljdCAidHlwZSIgLlZhbHVlcy5zZWNvbmRhcnkucG9kQW50aUFmZmluaXR5UHJlc2V0ICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTAgfX0KICAgICAgICBub2RlQWZmaW5pdHk6IHt7LSBpbmNsdWRlICJjb21tb24uYWZmaW5pdGllcy5ub2RlcyIgKGRpY3QgInR5cGUiIC5WYWx1ZXMuc2Vjb25kYXJ5Lm5vZGVBZmZpbml0eVByZXNldC50eXBlICJrZXkiIC5WYWx1ZXMuc2Vjb25kYXJ5Lm5vZGVBZmZpbml0eVByZXNldC5rZXkgInZhbHVlcyIgLlZhbHVlcy5zZWNvbmRhcnkubm9kZUFmZmluaXR5UHJlc2V0LnZhbHVlcykgfCBuaW5kZW50IDEwIH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5Lm5vZGVTZWxlY3RvciB9fQogICAgICBub2RlU2VsZWN0b3I6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5ub2RlU2VsZWN0b3IgImNvbnRleHQiICQpIHwgbmluZGVudCA4IH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnRvbGVyYXRpb25zIH19CiAgICAgIHRvbGVyYXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkudG9sZXJhdGlvbnMgImNvbnRleHQiICQpIHwgbmluZGVudCA4IH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnByaW9yaXR5Q2xhc3NOYW1lIH19CiAgICAgIHByaW9yaXR5Q2xhc3NOYW1lOiB7eyAuVmFsdWVzLnNlY29uZGFyeS5wcmlvcml0eUNsYXNzTmFtZSB8IHF1b3RlIH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnJ1bnRpbWVDbGFzc05hbWUgfX0KICAgICAgcnVudGltZUNsYXNzTmFtZToge3sgLlZhbHVlcy5zZWNvbmRhcnkucnVudGltZUNsYXNzTmFtZSB8IHF1b3RlIH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnNjaGVkdWxlck5hbWUgfX0KICAgICAgc2NoZWR1bGVyTmFtZToge3sgLlZhbHVlcy5zZWNvbmRhcnkuc2NoZWR1bGVyTmFtZSB8IHF1b3RlIH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnRvcG9sb2d5U3ByZWFkQ29uc3RyYWludHMgfX0KICAgICAgdG9wb2xvZ3lTcHJlYWRDb25zdHJhaW50czoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LnRvcG9sb2d5U3ByZWFkQ29uc3RyYWludHMgImNvbnRleHQiIC4pIHwgbmluZGVudCA4IH19CiAgICAgIHt7LSBlbmQgfX0KICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnBvZFNlY3VyaXR5Q29udGV4dC5lbmFibGVkIH19CiAgICAgIHNlY3VyaXR5Q29udGV4dDoge3stIG9taXQgLlZhbHVlcy5zZWNvbmRhcnkucG9kU2VjdXJpdHlDb250ZXh0ICJlbmFibGVkIiB8IHRvWWFtbCB8IG5pbmRlbnQgOCB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS50ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kcyB9fQogICAgICB0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kczoge3sgLlZhbHVlcy5zZWNvbmRhcnkudGVybWluYXRpb25HcmFjZVBlcmlvZFNlY29uZHMgfX0KICAgICAge3stIGVuZCB9fQogICAgICBpbml0Q29udGFpbmVyczoKICAgICAgICB7ey0gaWYgYW5kIC5WYWx1ZXMuc2Vjb25kYXJ5LnBvZFNlY3VyaXR5Q29udGV4dC5lbmFibGVkIC5WYWx1ZXMudm9sdW1lUGVybWlzc2lvbnMuZW5hYmxlZCAuVmFsdWVzLnNlY29uZGFyeS5wZXJzaXN0ZW5jZS5lbmFibGVkIH19CiAgICAgICAgLSBuYW1lOiB2b2x1bWUtcGVybWlzc2lvbnMKICAgICAgICAgIGltYWdlOiB7eyBpbmNsdWRlICJteXNxbC52b2x1bWVQZXJtaXNzaW9ucy5pbWFnZSIgLiB9fQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiB7eyAuVmFsdWVzLnZvbHVtZVBlcm1pc3Npb25zLmltYWdlLnB1bGxQb2xpY3kgfCBxdW90ZSB9fQogICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgLSAvYmluL2Jhc2gKICAgICAgICAgICAgLSAtZWMKICAgICAgICAgICAgLSB8CiAgICAgICAgICAgICAgbWtkaXIgLXAgIi9iaXRuYW1pL215c3FsIgogICAgICAgICAgICAgIGNob3duICJ7eyAuVmFsdWVzLnNlY29uZGFyeS5jb250YWluZXJTZWN1cml0eUNvbnRleHQucnVuQXNVc2VyIH19Ont7IC5WYWx1ZXMuc2Vjb25kYXJ5LnBvZFNlY3VyaXR5Q29udGV4dC5mc0dyb3VwIH19IiAiL2JpdG5hbWkvbXlzcWwiCiAgICAgICAgICAgICAgZmluZCAiL2JpdG5hbWkvbXlzcWwiIC1taW5kZXB0aCAxIC1tYXhkZXB0aCAxIC1ub3QgLW5hbWUgIi5zbmFwc2hvdCIgLW5vdCAtbmFtZSAibG9zdCtmb3VuZCIgfCB4YXJncyAtciBjaG93biAtUiAie3sgLlZhbHVlcy5zZWNvbmRhcnkuY29udGFpbmVyU2VjdXJpdHlDb250ZXh0LnJ1bkFzVXNlciB9fTp7eyAuVmFsdWVzLnNlY29uZGFyeS5wb2RTZWN1cml0eUNvbnRleHQuZnNHcm91cCB9fSIKICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgICAgcnVuQXNVc2VyOiAwCiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy52b2x1bWVQZXJtaXNzaW9ucy5yZXNvdXJjZXMgfX0KICAgICAgICAgIHJlc291cmNlczoge3stIHRvWWFtbCAuVmFsdWVzLnZvbHVtZVBlcm1pc3Npb25zLnJlc291cmNlcyB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBkYXRhCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvYml0bmFtaS9teXNxbAogICAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5wZXJzaXN0ZW5jZS5zdWJQYXRoIH19CiAgICAgICAgICAgICAgc3ViUGF0aDoge3sgLlZhbHVlcy5zZWNvbmRhcnkucGVyc2lzdGVuY2Uuc3ViUGF0aCB9fQogICAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LmluaXRDb250YWluZXJzIH19CiAgICAgICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LmluaXRDb250YWluZXJzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgOCB9fQogICAgICAgIHt7LSBlbmQgfX0KICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IG15c3FsCiAgICAgICAgICBpbWFnZToge3sgaW5jbHVkZSAibXlzcWwuaW1hZ2UiIC4gfX0KICAgICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5pbWFnZS5wdWxsUG9saWN5IHwgcXVvdGUgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5jb250YWluZXJTZWN1cml0eUNvbnRleHQuZW5hYmxlZCB9fQogICAgICAgICAgc2VjdXJpdHlDb250ZXh0OiB7ey0gb21pdCAuVmFsdWVzLnNlY29uZGFyeS5jb250YWluZXJTZWN1cml0eUNvbnRleHQgImVuYWJsZWQiIHwgdG9ZYW1sIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGlmIC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuZW5hYmxlZCB9fQogICAgICAgICAgY29tbWFuZDoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuZGlhZ25vc3RpY01vZGUuY29tbWFuZCAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZWxzZSBpZiAuVmFsdWVzLnNlY29uZGFyeS5jb21tYW5kIH19CiAgICAgICAgICBjb21tYW5kOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkuY29tbWFuZCAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5lbmFibGVkIH19CiAgICAgICAgICBhcmdzOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5hcmdzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbHNlIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LmFyZ3MgfX0KICAgICAgICAgIGFyZ3M6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5hcmdzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5saWZlY3ljbGVIb29rcyB9fQogICAgICAgICAgbGlmZWN5Y2xlOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkubGlmZWN5Y2xlSG9va3MgImNvbnRleHQiICQpIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgZW52OgogICAgICAgICAgICAtIG5hbWU6IEJJVE5BTUlfREVCVUcKICAgICAgICAgICAgICB2YWx1ZToge3sgdGVybmFyeSAidHJ1ZSIgImZhbHNlIiAob3IgLlZhbHVlcy5pbWFnZS5kZWJ1ZyAuVmFsdWVzLmRpYWdub3N0aWNNb2RlLmVuYWJsZWQpIHwgcXVvdGUgfX0KICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9SRVBMSUNBVElPTl9NT0RFCiAgICAgICAgICAgICAgdmFsdWU6ICJzbGF2ZSIKICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9NQVNURVJfSE9TVAogICAgICAgICAgICAgIHZhbHVlOiB7eyBpbmNsdWRlICJteXNxbC5wcmltYXJ5LmZ1bGxuYW1lIiAuIH19CiAgICAgICAgICAgIC0gbmFtZTogTVlTUUxfTUFTVEVSX1BPUlRfTlVNQkVSCiAgICAgICAgICAgICAgdmFsdWU6IHt7IC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLnBvcnRzLm15c3FsIHwgcXVvdGUgfX0KICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9NQVNURVJfUk9PVF9VU0VSCiAgICAgICAgICAgICAgdmFsdWU6ICJyb290IgogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX1JFUExJQ0FUSU9OX1VTRVIKICAgICAgICAgICAgICB2YWx1ZToge3sgLlZhbHVlcy5hdXRoLnJlcGxpY2F0aW9uVXNlciB8IHF1b3RlIH19CiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLmF1dGgudXNlUGFzc3dvcmRGaWxlcyB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX01BU1RFUl9ST09UX1BBU1NXT1JEX0ZJTEUKICAgICAgICAgICAgICB2YWx1ZToge3sgZGVmYXVsdCAiL29wdC9iaXRuYW1pL215c3FsL3NlY3JldHMvbXlzcWwtcm9vdC1wYXNzd29yZCIgLlZhbHVlcy5hdXRoLmN1c3RvbVBhc3N3b3JkRmlsZXMucm9vdCB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX1JFUExJQ0FUSU9OX1BBU1NXT1JEX0ZJTEUKICAgICAgICAgICAgICB2YWx1ZToge3sgZGVmYXVsdCAiL29wdC9iaXRuYW1pL215c3FsL3NlY3JldHMvbXlzcWwtcmVwbGljYXRpb24tcGFzc3dvcmQiIC5WYWx1ZXMuYXV0aC5jdXN0b21QYXNzd29yZEZpbGVzLnJlcGxpY2F0b3IgfX0KICAgICAgICAgICAge3stIGVsc2UgfX0KICAgICAgICAgICAgLSBuYW1lOiBNWVNRTF9NQVNURVJfUk9PVF9QQVNTV09SRAogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIHNlY3JldEtleVJlZjoKICAgICAgICAgICAgICAgICAgbmFtZToge3sgdGVtcGxhdGUgIm15c3FsLnNlY3JldE5hbWUiIC4gfX0KICAgICAgICAgICAgICAgICAga2V5OiBteXNxbC1yb290LXBhc3N3b3JkCiAgICAgICAgICAgIC0gbmFtZTogTVlTUUxfUkVQTElDQVRJT05fUEFTU1dPUkQKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBzZWNyZXRLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJteXNxbC5zZWNyZXROYW1lIiAuIH19CiAgICAgICAgICAgICAgICAgIGtleTogbXlzcWwtcmVwbGljYXRpb24tcGFzc3dvcmQKICAgICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkuZXh0cmFGbGFncyB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX0VYVFJBX0ZMQUdTCiAgICAgICAgICAgICAgdmFsdWU6ICJ7eyAuVmFsdWVzLnNlY29uZGFyeS5leHRyYUZsYWdzIH19IgogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5leHRyYUVudlZhcnMgfX0KICAgICAgICAgICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LmV4dHJhRW52VmFycyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIGVudkZyb206CiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5leHRyYUVudlZhcnNDTSB9fQogICAgICAgICAgICAtIGNvbmZpZ01hcFJlZjoKICAgICAgICAgICAgICAgIG5hbWU6IHt7IGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LmV4dHJhRW52VmFyc0NNICJjb250ZXh0IiAkKSB9fQogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5leHRyYUVudlZhcnNTZWNyZXQgfX0KICAgICAgICAgICAgLSBzZWNyZXRSZWY6CiAgICAgICAgICAgICAgICBuYW1lOiB7eyBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5leHRyYUVudlZhcnNTZWNyZXQgImNvbnRleHQiICQpIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIG5hbWU6IG15c3FsCiAgICAgICAgICAgICAgY29udGFpbmVyUG9ydDogMzMwNgogICAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkuZXh0cmFQb3J0cyB9fQogICAgICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkuZXh0cmFQb3J0cyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgIHt7LSBpZiBub3QgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5lbmFibGVkIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkuY3VzdG9tTGl2ZW5lc3NQcm9iZSB9fQogICAgICAgICAgbGl2ZW5lc3NQcm9iZToge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LmN1c3RvbUxpdmVuZXNzUHJvYmUgImNvbnRleHQiICQpIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVsc2UgaWYgLlZhbHVlcy5zZWNvbmRhcnkubGl2ZW5lc3NQcm9iZS5lbmFibGVkIH19CiAgICAgICAgICBsaXZlbmVzc1Byb2JlOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgKG9taXQgLlZhbHVlcy5zZWNvbmRhcnkubGl2ZW5lc3NQcm9iZSAiZW5hYmxlZCIpICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgICAgLSAvYmluL2Jhc2gKICAgICAgICAgICAgICAgIC0gLWVjCiAgICAgICAgICAgICAgICAtIHwKICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSIke01ZU1FMX01BU1RFUl9ST09UX1BBU1NXT1JEOi19IgogICAgICAgICAgICAgICAgICBpZiBbWyAtZiAiJHtNWVNRTF9NQVNURVJfUk9PVF9QQVNTV09SRF9GSUxFOi19IiBdXTsgdGhlbgogICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSQoY2F0ICIkTVlTUUxfTUFTVEVSX1JPT1RfUEFTU1dPUkRfRklMRSIpCiAgICAgICAgICAgICAgICAgIGZpCiAgICAgICAgICAgICAgICAgIG15c3FsYWRtaW4gc3RhdHVzIC11cm9vdCAtcCIke3Bhc3N3b3JkX2F1eH0iCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkuY3VzdG9tUmVhZGluZXNzUHJvYmUgfX0KICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkuY3VzdG9tUmVhZGluZXNzUHJvYmUgImNvbnRleHQiICQpIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVsc2UgaWYgLlZhbHVlcy5zZWNvbmRhcnkucmVhZGluZXNzUHJvYmUuZW5hYmxlZCB9fQogICAgICAgICAgcmVhZGluZXNzUHJvYmU6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAob21pdCAuVmFsdWVzLnNlY29uZGFyeS5yZWFkaW5lc3NQcm9iZSAiZW5hYmxlZCIpICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgICAgLSAvYmluL2Jhc2gKICAgICAgICAgICAgICAgIC0gLWVjCiAgICAgICAgICAgICAgICAtIHwKICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSIke01ZU1FMX01BU1RFUl9ST09UX1BBU1NXT1JEOi19IgogICAgICAgICAgICAgICAgICBpZiBbWyAtZiAiJHtNWVNRTF9NQVNURVJfUk9PVF9QQVNTV09SRF9GSUxFOi19IiBdXTsgdGhlbgogICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSQoY2F0ICIkTVlTUUxfTUFTVEVSX1JPT1RfUEFTU1dPUkRfRklMRSIpCiAgICAgICAgICAgICAgICAgIGZpCiAgICAgICAgICAgICAgICAgIG15c3FsYWRtaW4gc3RhdHVzIC11cm9vdCAtcCIke3Bhc3N3b3JkX2F1eH0iCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkuY3VzdG9tU3RhcnR1cFByb2JlIH19CiAgICAgICAgICBzdGFydHVwUHJvYmU6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5jdXN0b21TdGFydHVwUHJvYmUgImNvbnRleHQiICQpIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVsc2UgaWYgLlZhbHVlcy5zZWNvbmRhcnkuc3RhcnR1cFByb2JlLmVuYWJsZWQgfX0KICAgICAgICAgIHN0YXJ0dXBQcm9iZToge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIChvbWl0IC5WYWx1ZXMuc2Vjb25kYXJ5LnN0YXJ0dXBQcm9iZSAiZW5hYmxlZCIpICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgICAgLSAvYmluL2Jhc2gKICAgICAgICAgICAgICAgIC0gLWVjCiAgICAgICAgICAgICAgICAtIHwKICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSIke01ZU1FMX01BU1RFUl9ST09UX1BBU1NXT1JEOi19IgogICAgICAgICAgICAgICAgICBpZiBbWyAtZiAiJHtNWVNRTF9NQVNURVJfUk9PVF9QQVNTV09SRF9GSUxFOi19IiBdXTsgdGhlbgogICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSQoY2F0ICIkTVlTUUxfTUFTVEVSX1JPT1RfUEFTU1dPUkRfRklMRSIpCiAgICAgICAgICAgICAgICAgIGZpCiAgICAgICAgICAgICAgICAgIG15c3FsYWRtaW4gc3RhdHVzIC11cm9vdCAtcCIke3Bhc3N3b3JkX2F1eH0iCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkucmVzb3VyY2VzIH19CiAgICAgICAgICByZXNvdXJjZXM6IHt7IHRvWWFtbCAuVmFsdWVzLnNlY29uZGFyeS5yZXNvdXJjZXMgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogZGF0YQogICAgICAgICAgICAgIG1vdW50UGF0aDogL2JpdG5hbWkvbXlzcWwKICAgICAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkucGVyc2lzdGVuY2Uuc3ViUGF0aCB9fQogICAgICAgICAgICAgIHN1YlBhdGg6IHt7IC5WYWx1ZXMuc2Vjb25kYXJ5LnBlcnNpc3RlbmNlLnN1YlBhdGggfX0KICAgICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBpZiBvciAuVmFsdWVzLmluaXRkYlNjcmlwdHNDb25maWdNYXAgLlZhbHVlcy5pbml0ZGJTY3JpcHRzIH19CiAgICAgICAgICAgIC0gbmFtZTogY3VzdG9tLWluaXQtc2NyaXB0cwogICAgICAgICAgICAgIG1vdW50UGF0aDogL2RvY2tlci1lbnRyeXBvaW50LWluaXRkYi5kCiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgICAge3stIGlmIG9yIC5WYWx1ZXMuc2Vjb25kYXJ5LmNvbmZpZ3VyYXRpb24gLlZhbHVlcy5zZWNvbmRhcnkuZXhpc3RpbmdDb25maWdtYXAgfX0KICAgICAgICAgICAgLSBuYW1lOiBjb25maWcKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9vcHQvYml0bmFtaS9teXNxbC9jb25mL215LmNuZgogICAgICAgICAgICAgIHN1YlBhdGg6IG15LmNuZgogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICAgIHt7LSBpZiBhbmQgLlZhbHVlcy5hdXRoLnVzZVBhc3N3b3JkRmlsZXMgKG5vdCAuVmFsdWVzLmF1dGguY3VzdG9tUGFzc3dvcmRGaWxlcykgfX0KICAgICAgICAgICAgLSBuYW1lOiBteXNxbC1jcmVkZW50aWFscwogICAgICAgICAgICAgIG1vdW50UGF0aDogL29wdC9iaXRuYW1pL215c3FsL3NlY3JldHMvCiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LmV4dHJhVm9sdW1lTW91bnRzIH19CiAgICAgICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5leHRyYVZvbHVtZU1vdW50cyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICAgIHt7LSBlbmQgfX0KICAgICAgICB7ey0gaWYgLlZhbHVlcy5tZXRyaWNzLmVuYWJsZWQgfX0KICAgICAgICAtIG5hbWU6IG1ldHJpY3MKICAgICAgICAgIGltYWdlOiB7eyBpbmNsdWRlICJteXNxbC5tZXRyaWNzLmltYWdlIiAuIH19CiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IHt7IC5WYWx1ZXMubWV0cmljcy5pbWFnZS5wdWxsUG9saWN5IHwgcXVvdGUgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3MuY29udGFpbmVyU2VjdXJpdHlDb250ZXh0LmVuYWJsZWQgfX0KICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoge3stIG9taXQgLlZhbHVlcy5tZXRyaWNzLmNvbnRhaW5lclNlY3VyaXR5Q29udGV4dCAiZW5hYmxlZCIgfCB0b1lhbWwgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICBlbnY6CiAgICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLmF1dGgudXNlUGFzc3dvcmRGaWxlcyB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX1JPT1RfUEFTU1dPUkRfRklMRQogICAgICAgICAgICAgIHZhbHVlOiB7eyBkZWZhdWx0ICIvb3B0L2JpdG5hbWkvbXlzcWxkLWV4cG9ydGVyL3NlY3JldHMvbXlzcWwtcm9vdC1wYXNzd29yZCIgLlZhbHVlcy5hdXRoLmN1c3RvbVBhc3N3b3JkRmlsZXMucm9vdCB9fQogICAgICAgICAgICB7ey0gZWxzZSB9fQogICAgICAgICAgICAtIG5hbWU6IE1ZU1FMX1JPT1RfUEFTU1dPUkQKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBzZWNyZXRLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IHt7IHRlbXBsYXRlICJteXNxbC5zZWNyZXROYW1lIiAuIH19CiAgICAgICAgICAgICAgICAgIGtleTogbXlzcWwtcm9vdC1wYXNzd29yZAogICAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5lbmFibGVkIH19CiAgICAgICAgICBjb21tYW5kOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5kaWFnbm9zdGljTW9kZS5jb21tYW5kICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgMTIgfX0KICAgICAgICAgIGFyZ3M6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLmRpYWdub3N0aWNNb2RlLmFyZ3MgImNvbnRleHQiICQpIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVsc2UgfX0KICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgIC0gL2Jpbi9iYXNoCiAgICAgICAgICAgIC0gLWVjCiAgICAgICAgICAgIC0gfAogICAgICAgICAgICAgIHBhc3N3b3JkX2F1eD0iJHtNWVNRTF9ST09UX1BBU1NXT1JEOi19IgogICAgICAgICAgICAgIGlmIFtbIC1mICIke01ZU1FMX1JPT1RfUEFTU1dPUkRfRklMRTotfSIgXV07IHRoZW4KICAgICAgICAgICAgICAgICAgcGFzc3dvcmRfYXV4PSQoY2F0ICIkTVlTUUxfUk9PVF9QQVNTV09SRF9GSUxFIikKICAgICAgICAgICAgICBmaQogICAgICAgICAgICAgIERBVEFfU09VUkNFX05BTUU9InJvb3Q6JHtwYXNzd29yZF9hdXh9QChsb2NhbGhvc3Q6MzMwNikvIiAvYmluL215c3FsZF9leHBvcnRlciB7ey0gcmFuZ2UgLlZhbHVlcy5tZXRyaWNzLmV4dHJhQXJncy5zZWNvbmRhcnkgfX0ge3sgLiB9fSB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgLSBuYW1lOiBtZXRyaWNzCiAgICAgICAgICAgICAgY29udGFpbmVyUG9ydDogOTEwNAogICAgICAgICAge3stIGlmIG5vdCAuVmFsdWVzLmRpYWdub3N0aWNNb2RlLmVuYWJsZWQgfX0KICAgICAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3MubGl2ZW5lc3NQcm9iZS5lbmFibGVkIH19CiAgICAgICAgICBsaXZlbmVzc1Byb2JlOiB7ey0gb21pdCAuVmFsdWVzLm1ldHJpY3MubGl2ZW5lc3NQcm9iZSAiZW5hYmxlZCIgfCB0b1lhbWwgfCBuaW5kZW50IDEyIH19CiAgICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgICAgcGF0aDogL21ldHJpY3MKICAgICAgICAgICAgICBwb3J0OiBtZXRyaWNzCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5tZXRyaWNzLnJlYWRpbmVzc1Byb2JlLmVuYWJsZWQgfX0KICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOiB7ey0gb21pdCAuVmFsdWVzLm1ldHJpY3MucmVhZGluZXNzUHJvYmUgImVuYWJsZWQiIHwgdG9ZYW1sIHwgbmluZGVudCAxMiB9fQogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC9tZXRyaWNzCiAgICAgICAgICAgICAgcG9ydDogbWV0cmljcwogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGlmIC5WYWx1ZXMubWV0cmljcy5yZXNvdXJjZXMgfX0KICAgICAgICAgIHJlc291cmNlczoge3stIHRvWWFtbCAuVmFsdWVzLm1ldHJpY3MucmVzb3VyY2VzIHwgbmluZGVudCAxMiB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgICAge3stIGlmIGFuZCAuVmFsdWVzLmF1dGgudXNlUGFzc3dvcmRGaWxlcyAobm90IC5WYWx1ZXMuYXV0aC5jdXN0b21QYXNzd29yZEZpbGVzKSB9fQogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IG15c3FsLWNyZWRlbnRpYWxzCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvb3B0L2JpdG5hbWkvbXlzcWxkLWV4cG9ydGVyL3NlY3JldHMvCiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5zaWRlY2FycyB9fQogICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5zaWRlY2FycyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDggfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgIHZvbHVtZXM6CiAgICAgICAge3stIGlmIG9yIC5WYWx1ZXMuaW5pdGRiU2NyaXB0c0NvbmZpZ01hcCAuVmFsdWVzLmluaXRkYlNjcmlwdHMgfX0KICAgICAgICAtIG5hbWU6IGN1c3RvbS1pbml0LXNjcmlwdHMKICAgICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgICAgbmFtZToge3sgaW5jbHVkZSAibXlzcWwuaW5pdGRiU2NyaXB0c0NNIiAuIH19CiAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBpZiBvciAuVmFsdWVzLnNlY29uZGFyeS5jb25maWd1cmF0aW9uIC5WYWx1ZXMuc2Vjb25kYXJ5LmV4aXN0aW5nQ29uZmlnbWFwIH19CiAgICAgICAgLSBuYW1lOiBjb25maWcKICAgICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgICAgbmFtZToge3sgaW5jbHVkZSAibXlzcWwuc2Vjb25kYXJ5LmNvbmZpZ21hcE5hbWUiIC4gfX0KICAgICAgICB7ey0gZW5kIH19CiAgICAgICAge3stIGlmIGFuZCAuVmFsdWVzLmF1dGgudXNlUGFzc3dvcmRGaWxlcyAobm90IC5WYWx1ZXMuYXV0aC5jdXN0b21QYXNzd29yZEZpbGVzKSB9fQogICAgICAgIC0gbmFtZTogbXlzcWwtY3JlZGVudGlhbHMKICAgICAgICAgIHNlY3JldDoKICAgICAgICAgICAgc2VjcmV0TmFtZToge3sgdGVtcGxhdGUgIm15c3FsLnNlY3JldE5hbWUiIC4gfX0KICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgLSBrZXk6IG15c3FsLXJvb3QtcGFzc3dvcmQKICAgICAgICAgICAgICAgIHBhdGg6IG15c3FsLXJvb3QtcGFzc3dvcmQKICAgICAgICAgICAgICAtIGtleTogbXlzcWwtcmVwbGljYXRpb24tcGFzc3dvcmQKICAgICAgICAgICAgICAgIHBhdGg6IG15c3FsLXJlcGxpY2F0aW9uLXBhc3N3b3JkCiAgICAgICAge3stIGVuZCB9fQogICAgICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5leHRyYVZvbHVtZXMgfX0KICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkuZXh0cmFWb2x1bWVzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgOCB9fQogICAgICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgYW5kIC5WYWx1ZXMuc2Vjb25kYXJ5LnBlcnNpc3RlbmNlLmVuYWJsZWQgLlZhbHVlcy5zZWNvbmRhcnkucGVyc2lzdGVuY2UuZXhpc3RpbmdDbGFpbSB9fQogICAgICAgIC0gbmFtZTogZGF0YQogICAgICAgICAgcGVyc2lzdGVudFZvbHVtZUNsYWltOgogICAgICAgICAgICBjbGFpbU5hbWU6IHt7IHRwbCAuVmFsdWVzLnNlY29uZGFyeS5wZXJzaXN0ZW5jZS5leGlzdGluZ0NsYWltIC4gfX0KICB7ey0gZWxzZSBpZiBub3QgLlZhbHVlcy5zZWNvbmRhcnkucGVyc2lzdGVuY2UuZW5hYmxlZCB9fQogICAgICAgIC0gbmFtZTogZGF0YQogICAgICAgICAgZW1wdHlEaXI6IHt9CiAge3stIGVsc2UgfX0KICB2b2x1bWVDbGFpbVRlbXBsYXRlczoKICAgIC0gbWV0YWRhdGE6CiAgICAgICAgbmFtZTogZGF0YQogICAgICAgIGxhYmVsczoge3sgaW5jbHVkZSAiY29tbW9uLmxhYmVscy5tYXRjaExhYmVscyIgLiB8IG5pbmRlbnQgMTAgfX0KICAgICAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogc2Vjb25kYXJ5CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5jb21tb25MYWJlbHMgfX0KICAgICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEwIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkucGVyc2lzdGVuY2UuYW5ub3RhdGlvbnMgfX0KICAgICAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5wZXJzaXN0ZW5jZS5hbm5vdGF0aW9ucyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEwIH19CiAgICAgICAgICB7ey0gZW5kIH19CiAgICAgICAgICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogICAgICAgICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQpIHwgbmluZGVudCAxMCB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICBzcGVjOgogICAgICAgIGFjY2Vzc01vZGVzOgogICAgICAgICAge3stIHJhbmdlIC5WYWx1ZXMuc2Vjb25kYXJ5LnBlcnNpc3RlbmNlLmFjY2Vzc01vZGVzIH19CiAgICAgICAgICAtIHt7IC4gfCBxdW90ZSB9fQogICAgICAgICAge3stIGVuZCB9fQogICAgICAgIHJlc291cmNlczoKICAgICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgICBzdG9yYWdlOiB7eyAuVmFsdWVzLnNlY29uZGFyeS5wZXJzaXN0ZW5jZS5zaXplIHwgcXVvdGUgfX0KICAgICAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnN0b3JhZ2UuY2xhc3MiIChkaWN0ICJwZXJzaXN0ZW5jZSIgLlZhbHVlcy5zZWNvbmRhcnkucGVyc2lzdGVuY2UgImdsb2JhbCIgLlZhbHVlcy5nbG9iYWwpIHwgbmluZGVudCA4IH19CiAgICAgICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnBlcnNpc3RlbmNlLnNlbGVjdG9yIH19CiAgICAgICAgc2VsZWN0b3I6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5wZXJzaXN0ZW5jZS5zZWxlY3RvciAiY29udGV4dCIgJCkgfCBuaW5kZW50IDEwIH19CiAgICAgICAge3stIGVuZCAtfX0KICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0K"
      },
      {
        "name": "templates/secondary/svc-headless.yaml",
        "data": "e3stIGlmIGVxIC5WYWx1ZXMuYXJjaGl0ZWN0dXJlICJyZXBsaWNhdGlvbiIgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJteXNxbC5zZWNvbmRhcnkuZnVsbG5hbWUiIC4gfX0taGVhZGxlc3MKICBuYW1lc3BhY2U6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5uYW1lc3BhY2UiIC4gfCBxdW90ZSB9fQogIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDQgfX0KICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogc2Vjb25kYXJ5CiAgICB7ey0gaWYgLlZhbHVlcy5jb21tb25MYWJlbHMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5jb21tb25MYWJlbHMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogIHt7LSBpZiBvciAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLmhlYWRsZXNzLmFubm90YXRpb25zIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoKICAgIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLmhlYWRsZXNzLmFubm90YXRpb25zIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiIChkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZWNvbmRhcnkuc2VydmljZS5oZWFkbGVzcy5hbm5vdGF0aW9ucyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogIHt7LSBlbmQgfX0Kc3BlYzoKICB0eXBlOiBDbHVzdGVySVAKICBjbHVzdGVySVA6IE5vbmUKICBwdWJsaXNoTm90UmVhZHlBZGRyZXNzZXM6IHRydWUKICBwb3J0czoKICAgIC0gbmFtZTogbXlzcWwKICAgICAgcG9ydDoge3sgLlZhbHVlcy5zZWNvbmRhcnkuc2VydmljZS5wb3J0cy5teXNxbCB9fQogICAgICB0YXJnZXRQb3J0OiBteXNxbAogIHNlbGVjdG9yOiB7eyBpbmNsdWRlICJjb21tb24ubGFiZWxzLm1hdGNoTGFiZWxzIiAuIHwgbmluZGVudCA0IH19CiAgICBhcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHNlY29uZGFyeQp7ey0gZW5kIH19Cg=="
      },
      {
        "name": "templates/secondary/svc.yaml",
        "data": "e3stIGlmIGVxIC5WYWx1ZXMuYXJjaGl0ZWN0dXJlICJyZXBsaWNhdGlvbiIgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJteXNxbC5zZWNvbmRhcnkuZnVsbG5hbWUiIC4gfX0KICBuYW1lc3BhY2U6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5uYW1lc3BhY2UiIC4gfCBxdW90ZSB9fQogIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDQgfX0KICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogc2Vjb25kYXJ5CiAgICB7ey0gaWYgLlZhbHVlcy5jb21tb25MYWJlbHMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5jb21tb25MYWJlbHMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogIGFubm90YXRpb25zOgogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkuc2VydmljZS5hbm5vdGF0aW9ucyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLmFubm90YXRpb25zICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0Kc3BlYzoKICB0eXBlOiB7eyAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLnR5cGUgfX0KICB7ey0gaWYgYW5kIC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UuY2x1c3RlcklQIChlcSAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLnR5cGUgIkNsdXN0ZXJJUCIpIH19CiAgY2x1c3RlcklQOiB7eyAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLmNsdXN0ZXJJUCB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5zZWNvbmRhcnkuc2VydmljZS5zZXNzaW9uQWZmaW5pdHkgfX0KICBzZXNzaW9uQWZmaW5pdHk6IHt7IC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2Uuc2Vzc2lvbkFmZmluaXR5IH19CiAge3stIGVuZCB9fQogIHt7LSBpZiAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLnNlc3Npb25BZmZpbml0eUNvbmZpZyB9fQogIHNlc3Npb25BZmZpbml0eUNvbmZpZzoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2Uuc2Vzc2lvbkFmZmluaXR5Q29uZmlnICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgb3IgKGVxIC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UudHlwZSAiTG9hZEJhbGFuY2VyIikgKGVxIC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UudHlwZSAiTm9kZVBvcnQiKSB9fQogIGV4dGVybmFsVHJhZmZpY1BvbGljeToge3sgLlZhbHVlcy5zZWNvbmRhcnkuc2VydmljZS5leHRlcm5hbFRyYWZmaWNQb2xpY3kgfCBxdW90ZSB9fQogIHt7LSBlbmQgfX0KICB7ey0gaWYgYW5kIChlcSAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLnR5cGUgIkxvYWRCYWxhbmNlciIpIChub3QgKGVtcHR5IC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UubG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzKSkgfX0KICBsb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXM6IHt7IC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UubG9hZEJhbGFuY2VyU291cmNlUmFuZ2VzIH19CiAge3stIGVuZCB9fQogIHt7LSBpZiBhbmQgKGVxIC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UudHlwZSAiTG9hZEJhbGFuY2VyIikgKG5vdCAoZW1wdHkgLlZhbHVlcy5zZWNvbmRhcnkuc2VydmljZS5sb2FkQmFsYW5jZXJJUCkpIH19CiAgbG9hZEJhbGFuY2VySVA6IHt7IC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UubG9hZEJhbGFuY2VySVAgfX0KICB7ey0gZW5kIH19CiAgcG9ydHM6CiAgICAtIG5hbWU6IG15c3FsCiAgICAgIHBvcnQ6IHt7IC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UucG9ydHMubXlzcWwgfX0KICAgICAgcHJvdG9jb2w6IFRDUAogICAgICB0YXJnZXRQb3J0OiBteXNxbAogICAgICB7ey0gaWYgKGFuZCAob3IgKGVxIC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UudHlwZSAiTm9kZVBvcnQiKSAoZXEgLlZhbHVlcy5zZWNvbmRhcnkuc2VydmljZS50eXBlICJMb2FkQmFsYW5jZXIiKSkgLlZhbHVlcy5zZWNvbmRhcnkuc2VydmljZS5ub2RlUG9ydHMubXlzcWwpIH19CiAgICAgIG5vZGVQb3J0OiB7eyAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLm5vZGVQb3J0cy5teXNxbCB9fQogICAgICB7ey0gZWxzZSBpZiBlcSAuVmFsdWVzLnNlY29uZGFyeS5zZXJ2aWNlLnR5cGUgIkNsdXN0ZXJJUCIgfX0KICAgICAgbm9kZVBvcnQ6IG51bGwKICAgICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UuZXh0cmFQb3J0cyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoZGljdCAidmFsdWUiIC5WYWx1ZXMuc2Vjb25kYXJ5LnNlcnZpY2UuZXh0cmFQb3J0cyAiY29udGV4dCIgJCkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICBzZWxlY3Rvcjoge3sgaW5jbHVkZSAiY29tbW9uLmxhYmVscy5tYXRjaExhYmVscyIgLiB8IG5pbmRlbnQgNCB9fQogICAgYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50OiBzZWNvbmRhcnkKe3stIGVuZCB9fQo="
      },
      {
        "name": "templates/secrets.yaml",
        "data": "e3stICRob3N0IDo9IGluY2x1ZGUgIm15c3FsLnByaW1hcnkuZnVsbG5hbWUiIC4gfX0Ke3stICRwb3J0IDo9IHByaW50IC5WYWx1ZXMucHJpbWFyeS5zZXJ2aWNlLnBvcnRzLm15c3FsIH19Cnt7LSAkcm9vdFBhc3N3b3JkIDo9IGluY2x1ZGUgImNvbW1vbi5zZWNyZXRzLnBhc3N3b3Jkcy5tYW5hZ2UiIChkaWN0ICJzZWNyZXQiIChpbmNsdWRlICJteXNxbC5zZWNyZXROYW1lIiAuKSAia2V5IiAibXlzcWwtcm9vdC1wYXNzd29yZCIgImxlbmd0aCIgMTAgInByb3ZpZGVkVmFsdWVzIiAobGlzdCAiYXV0aC5yb290UGFzc3dvcmQiKSAiY29udGV4dCIgJCkgfCB0cmltQWxsICJcIiIgfCBiNjRkZWMgfX0Ke3stICRwYXNzd29yZCA6PSBpbmNsdWRlICJjb21tb24uc2VjcmV0cy5wYXNzd29yZHMubWFuYWdlIiAoZGljdCAic2VjcmV0IiAoaW5jbHVkZSAibXlzcWwuc2VjcmV0TmFtZSIgLikgImtleSIgIm15c3FsLXBhc3N3b3JkIiAibGVuZ3RoIiAxMCAicHJvdmlkZWRWYWx1ZXMiIChsaXN0ICJhdXRoLnBhc3N3b3JkIikgImNvbnRleHQiICQpIHwgdHJpbUFsbCAiXCIiIHwgYjY0ZGVjIH19Cnt7LSBpZiBlcSAoaW5jbHVkZSAibXlzcWwuY3JlYXRlU2VjcmV0IiAuKSAidHJ1ZSIgfX0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5mdWxsbmFtZSIgLiB9fQogIG5hbWVzcGFjZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB8IHF1b3RlIH19CiAgbGFiZWxzOiB7ey0gaW5jbHVkZSAiY29tbW9uLmxhYmVscy5zdGFuZGFyZCIgLiB8IG5pbmRlbnQgNCB9fQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gaWYgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyB9fQogIGFubm90YXRpb25zOiB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogIHt7LSBlbmQgfX0KdHlwZTogT3BhcXVlCmRhdGE6CiAgbXlzcWwtcm9vdC1wYXNzd29yZDoge3sgcHJpbnQgJHJvb3RQYXNzd29yZCB8IGI2NGVuYyB8IHF1b3RlIH19CiAgbXlzcWwtcGFzc3dvcmQ6IHt7IHByaW50ICRwYXNzd29yZCB8IGI2NGVuYyB8IHF1b3RlIH19CiAge3stIGlmIGVxIC5WYWx1ZXMuYXJjaGl0ZWN0dXJlICJyZXBsaWNhdGlvbiIgfX0KICBteXNxbC1yZXBsaWNhdGlvbi1wYXNzd29yZDoge3sgaW5jbHVkZSAiY29tbW9uLnNlY3JldHMucGFzc3dvcmRzLm1hbmFnZSIgKGRpY3QgInNlY3JldCIgKGluY2x1ZGUgImNvbW1vbi5uYW1lcy5mdWxsbmFtZSIgLikgImtleSIgIm15c3FsLXJlcGxpY2F0aW9uLXBhc3N3b3JkIiAibGVuZ3RoIiAxMCAicHJvdmlkZWRWYWx1ZXMiIChsaXN0ICJhdXRoLnJlcGxpY2F0aW9uUGFzc3dvcmQiKSAiY29udGV4dCIgJCkgfX0KICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0Ke3stIGlmIC5WYWx1ZXMuc2VydmljZUJpbmRpbmdzLmVuYWJsZWQgfX0KLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lOiB7eyBpbmNsdWRlICJjb21tb24ubmFtZXMuZnVsbG5hbWUiIC4gfX0tc3ZjYmluZC1yb290CiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfCBxdW90ZSB9fQogIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkxhYmVscyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CnR5cGU6IHNlcnZpY2ViaW5kaW5nLmlvL215c3FsCmRhdGE6CiAgcHJvdmlkZXI6IHt7IHByaW50ICJiaXRuYW1pIiB8IGI2NGVuYyB8IHF1b3RlIH19CiAgdHlwZToge3sgcHJpbnQgIm15c3FsIiB8IGI2NGVuYyB8IHF1b3RlIH19CiAgaG9zdDoge3sgcHJpbnQgJGhvc3QgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHBvcnQ6IHt7IHByaW50ICRwb3J0IHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB1c2VybmFtZToge3sgcHJpbnQgInJvb3QiIHwgYjY0ZW5jIHwgcXVvdGUgfX0KICBwYXNzd29yZDoge3sgcHJpbnQgJHJvb3RQYXNzd29yZCB8IGI2NGVuYyB8IHF1b3RlIH19CiAgdXJpOiB7eyBwcmludGYgIm15c3FsOi8vcm9vdDolc0AlczolcyIgJHJvb3RQYXNzd29yZCAkaG9zdCAkcG9ydCB8IGI2NGVuYyB8IHF1b3RlIH19Cgp7ey0gaWYgLlZhbHVlcy5hdXRoLnVzZXJuYW1lIH19Cnt7LSAkZGF0YWJhc2UgOj0gLlZhbHVlcy5hdXRoLmRhdGFiYXNlICB9fQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5mdWxsbmFtZSIgLiB9fS1zdmNiaW5kLWN1c3RvbS11c2VyCiAgbmFtZXNwYWNlOiB7eyAuUmVsZWFzZS5OYW1lc3BhY2UgfCBxdW90ZSB9fQogIGxhYmVsczoge3stIGluY2x1ZGUgImNvbW1vbi5sYWJlbHMuc3RhbmRhcmQiIC4gfCBuaW5kZW50IDQgfX0KICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkxhYmVscyB9fQogICAge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICBhbm5vdGF0aW9uczoge3stIGluY2x1ZGUgImNvbW1vbi50cGx2YWx1ZXMucmVuZGVyIiAoIGRpY3QgInZhbHVlIiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICB7ey0gZW5kIH19CnR5cGU6IHNlcnZpY2ViaW5kaW5nLmlvL215c3FsCmRhdGE6CiAgcHJvdmlkZXI6IHt7IHByaW50ICJiaXRuYW1pIiB8IGI2NGVuYyB8IHF1b3RlIH19CiAgdHlwZToge3sgcHJpbnQgIm15c3FsIiB8IGI2NGVuYyB8IHF1b3RlIH19CiAgaG9zdDoge3sgcHJpbnQgJGhvc3QgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHBvcnQ6IHt7IHByaW50ICRwb3J0IHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB1c2VybmFtZToge3sgcHJpbnQgLlZhbHVlcy5hdXRoLnVzZXJuYW1lIHwgYjY0ZW5jIHwgcXVvdGUgfX0KICB7ey0gaWYgJGRhdGFiYXNlIH19CiAgZGF0YWJhc2U6IHt7IHByaW50ICRkYXRhYmFzZSB8IGI2NGVuYyB8IHF1b3RlIH19CiAge3stIGVuZCB9fQogIHBhc3N3b3JkOiB7eyBwcmludCAkcGFzc3dvcmQgfCBiNjRlbmMgfCBxdW90ZSB9fQogIHVyaToge3sgcHJpbnRmICJteXNxbDovLyVzOiVzQCVzOiVzLyVzIiAuVmFsdWVzLmF1dGgudXNlcm5hbWUgJHBhc3N3b3JkICRob3N0ICRwb3J0ICRkYXRhYmFzZSB8IGI2NGVuYyB8IHF1b3RlIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
      },
      {
        "name": "templates/serviceaccount.yaml",
        "data": "e3stIGlmIC5WYWx1ZXMuc2VydmljZUFjY291bnQuY3JlYXRlIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgIm15c3FsLnNlcnZpY2VBY2NvdW50TmFtZSIgLiB9fQogIG5hbWVzcGFjZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLm5hbWVzcGFjZSIgLiB8IHF1b3RlIH19CiAgbGFiZWxzOiB7ey0gaW5jbHVkZSAiY29tbW9uLmxhYmVscy5zdGFuZGFyZCIgLiB8IG5pbmRlbnQgNCB9fQogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uTGFiZWxzIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uTGFiZWxzICJjb250ZXh0IiAkICkgfCBuaW5kZW50IDQgfX0KICAgIHt7LSBlbmQgfX0KICBhbm5vdGF0aW9uczoKICAgIHt7LSBpZiAuVmFsdWVzLmNvbW1vbkFubm90YXRpb25zIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogICAge3stIGlmIC5WYWx1ZXMuc2VydmljZUFjY291bnQuYW5ub3RhdGlvbnMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5zZXJ2aWNlQWNjb3VudC5hbm5vdGF0aW9ucyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CmF1dG9tb3VudFNlcnZpY2VBY2NvdW50VG9rZW46IHt7IC5WYWx1ZXMuc2VydmljZUFjY291bnQuYXV0b21vdW50U2VydmljZUFjY291bnRUb2tlbiB9fQp7ey0gaWYgKG5vdCAuVmFsdWVzLmF1dGguY3VzdG9tUGFzc3dvcmRGaWxlcykgfX0Kc2VjcmV0czoKICAtIG5hbWU6IHt7IHRlbXBsYXRlICJteXNxbC5zZWNyZXROYW1lIiAuIH19Cnt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
      },
      {
        "name": "templates/servicemonitor.yaml",
        "data": "e3stIGlmIGFuZCAuVmFsdWVzLm1ldHJpY3MuZW5hYmxlZCAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3IuZW5hYmxlZCB9fQphcGlWZXJzaW9uOiBtb25pdG9yaW5nLmNvcmVvcy5jb20vdjEKa2luZDogU2VydmljZU1vbml0b3IKbWV0YWRhdGE6CiAgbmFtZToge3sgaW5jbHVkZSAiY29tbW9uLm5hbWVzLmZ1bGxuYW1lIiAuIH19CiAgbmFtZXNwYWNlOiB7eyBkZWZhdWx0IChpbmNsdWRlICJjb21tb24ubmFtZXMubmFtZXNwYWNlIiAuKSAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3IubmFtZXNwYWNlIH19CiAgbGFiZWxzOiB7ey0gaW5jbHVkZSAiY29tbW9uLmxhYmVscy5zdGFuZGFyZCIgLiB8IG5pbmRlbnQgNCB9fQogICAge3stIGlmIC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlTW9uaXRvci5sYWJlbHMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5tZXRyaWNzLnNlcnZpY2VNb25pdG9yLmxhYmVscyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5jb21tb25MYWJlbHMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5jb21tb25MYWJlbHMgImNvbnRleHQiICQgKSB8IG5pbmRlbnQgNCB9fQogICAge3stIGVuZCB9fQogIGFubm90YXRpb25zOgogICAge3stIGlmIC5WYWx1ZXMuY29tbW9uQW5ub3RhdGlvbnMgfX0KICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5jb21tb25Bbm5vdGF0aW9ucyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CiAgICB7ey0gaWYgLlZhbHVlcy5tZXRyaWNzLnNlcnZpY2VNb25pdG9yLmFubm90YXRpb25zIH19CiAgICB7ey0gaW5jbHVkZSAiY29tbW9uLnRwbHZhbHVlcy5yZW5kZXIiICggZGljdCAidmFsdWUiIC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlTW9uaXRvci5hbm5vdGF0aW9ucyAiY29udGV4dCIgJCApIHwgbmluZGVudCA0IH19CiAgICB7ey0gZW5kIH19CnNwZWM6CiAgam9iTGFiZWw6IHt7IC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlTW9uaXRvci5qb2JMYWJlbCB8IHF1b3RlIH19CiAgZW5kcG9pbnRzOgogICAgLSBwb3J0OiBtZXRyaWNzCiAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3IuaW50ZXJ2YWwgfX0KICAgICAgaW50ZXJ2YWw6IHt7IC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlTW9uaXRvci5pbnRlcnZhbCB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3Iuc2NyYXBlVGltZW91dCB9fQogICAgICBzY3JhcGVUaW1lb3V0OiB7eyAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3Iuc2NyYXBlVGltZW91dCB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3IuaG9ub3JMYWJlbHMgfX0KICAgICAgaG9ub3JMYWJlbHM6IHt7IC5WYWx1ZXMubWV0cmljcy5zZXJ2aWNlTW9uaXRvci5ob25vckxhYmVscyB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3IubWV0cmljUmVsYWJlbGluZ3MgfX0KICAgICAgbWV0cmljUmVsYWJlbGluZ3M6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5tZXRyaWNzLnNlcnZpY2VNb25pdG9yLm1ldHJpY1JlbGFiZWxpbmdzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgOCB9fQogICAgICB7ey0gZW5kIH19CiAgICAgIHt7LSBpZiAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3IucmVsYWJlbGluZ3MgfX0KICAgICAgcmVsYWJlbGluZ3M6IHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKCBkaWN0ICJ2YWx1ZSIgLlZhbHVlcy5tZXRyaWNzLnNlcnZpY2VNb25pdG9yLnJlbGFiZWxpbmdzICJjb250ZXh0IiAkKSB8IG5pbmRlbnQgOCB9fQogICAgICB7ey0gZW5kIH19CiAgbmFtZXNwYWNlU2VsZWN0b3I6CiAgICBtYXRjaE5hbWVzOgogICAgICAtIHt7IGluY2x1ZGUgImNvbW1vbi5uYW1lcy5uYW1lc3BhY2UiIC4gfCBxdW90ZSB9fQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6IHt7LSBpbmNsdWRlICJjb21tb24ubGFiZWxzLm1hdGNoTGFiZWxzIiAuIHwgbmluZGVudCA2IH19CiAgICAgIGFwcC5rdWJlcm5ldGVzLmlvL2NvbXBvbmVudDogbWV0cmljcwogICAgICB7ey0gaWYgLlZhbHVlcy5tZXRyaWNzLnNlcnZpY2VNb25pdG9yLnNlbGVjdG9yIH19CiAgICAgIHt7LSBpbmNsdWRlICJjb21tb24udHBsdmFsdWVzLnJlbmRlciIgKGRpY3QgInZhbHVlIiAuVmFsdWVzLm1ldHJpY3Muc2VydmljZU1vbml0b3Iuc2VsZWN0b3IgImNvbnRleHQiICQpIHwgbmluZGVudCA2IH19CiAgICAgIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
      }
    ],
    "values": {
      "architecture": "standalone",
      "auth": {
        "createDatabase": true,
        "customPasswordFiles": {},
        "database": "my_database",
        "existingSecret": "",
        "password": "",
        "replicationPassword": "",
        "replicationUser": "replicator",
        "rootPassword": "",
        "usePasswordFiles": false,
        "username": ""
      },
      "clusterDomain": "cluster.local",
      "common": {
        "exampleValue": "common-chart",
        "global": {
          "imagePullSecrets": [],
          "imageRegistry": "",
          "storageClass": ""
        }
      },
      "commonAnnotations": {},
      "commonLabels": {},
      "diagnosticMode": {
        "args": [
          "infinity"
        ],
        "command": [
          "sleep"
        ],
        "enabled": false
      },
      "extraDeploy": [],
      "fullnameOverride": "",
      "global": {
        "imagePullSecrets": [],
        "imageRegistry": "",
        "storageClass": ""
      },
      "image": {
        "debug": false,
        "digest": "",
        "pullPolicy": "IfNotPresent",
        "pullSecrets": [],
        "registry": "docker.io",
        "repository": "bitnami/mysql",
        "tag": "8.0.33-debian-11-r17"
      },
      "initdbScripts": {},
      "initdbScriptsConfigMap": "",
      "kubeVersion": "",
      "metrics": {
        "containerSecurityContext": {
          "enabled": true,
          "runAsNonRoot": true,
          "runAsUser": 1001
        },
        "enabled": false,
        "extraArgs": {
          "primary": [],
          "secondary": []
        },
        "image": {
          "digest": "",
          "pullPolicy": "IfNotPresent",
          "pullSecrets": [],
          "registry": "docker.io",
          "repository": "bitnami/mysqld-exporter",
          "tag": "0.14.0-debian-11-r125"
        },
        "livenessProbe": {
          "enabled": true,
          "failureThreshold": 3,
          "initialDelaySeconds": 120,
          "periodSeconds": 10,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "prometheusRule": {
          "additionalLabels": {},
          "enabled": false,
          "namespace": "",
          "rules": []
        },
        "readinessProbe": {
          "enabled": true,
          "failureThreshold": 3,
          "initialDelaySeconds": 30,
          "periodSeconds": 10,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "resources": {
          "limits": {},
          "requests": {}
        },
        "service": {
          "annotations": {
            "prometheus.io/port": "{{ .Values.metrics.service.port }}",
            "prometheus.io/scrape": "true"
          },
          "clusterIP": "",
          "port": 9104,
          "type": "ClusterIP"
        },
        "serviceMonitor": {
          "annotations": {},
          "enabled": false,
          "honorLabels": false,
          "interval": "30s",
          "jobLabel": "",
          "labels": {},
          "metricRelabelings": [],
          "namespace": "",
          "relabelings": [],
          "scrapeTimeout": "",
          "selector": {}
        }
      },
      "nameOverride": "",
      "namespaceOverride": "",
      "networkPolicy": {
        "allowExternal": true,
        "enabled": false,
        "explicitNamespacesSelector": {}
      },
      "primary": {
        "affinity": {},
        "args": [],
        "command": [],
        "configuration": "[mysqld]\ndefault_authentication_plugin=mysql_native_password\nskip-name-resolve\nexplicit_defaults_for_timestamp\nbasedir=/opt/bitnami/mysql\nplugin_dir=/opt/bitnami/mysql/lib/plugin\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndatadir=/bitnami/mysql/data\ntmpdir=/opt/bitnami/mysql/tmp\nmax_allowed_packet=16M\nbind-address=*\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid\nlog-error=/opt/bitnami/mysql/logs/mysqld.log\ncharacter-set-server=UTF8\ncollation-server=utf8_general_ci\nslow_query_log=0\nslow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log\nlong_query_time=10.0\n\n[client]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndefault-character-set=UTF8\nplugin_dir=/opt/bitnami/mysql/lib/plugin\n\n[manager]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid",
        "containerSecurityContext": {
          "enabled": true,
          "runAsNonRoot": true,
          "runAsUser": 1001
        },
        "customLivenessProbe": {},
        "customReadinessProbe": {},
        "customStartupProbe": {},
        "existingConfigmap": "",
        "extraEnvVars": [],
        "extraEnvVarsCM": "",
        "extraEnvVarsSecret": "",
        "extraFlags": "",
        "extraPorts": [],
        "extraVolumeMounts": [],
        "extraVolumes": [],
        "hostAliases": [],
        "initContainers": [],
        "lifecycleHooks": {},
        "livenessProbe": {
          "enabled": true,
          "failureThreshold": 3,
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "name": "primary",
        "nodeAffinityPreset": {
          "key": "",
          "type": "",
          "values": []
        },
        "nodeSelector": {},
        "pdb": {
          "create": false,
          "maxUnavailable": "",
          "minAvailable": 1
        },
        "persistence": {
          "accessModes": [
            "ReadWriteOnce"
          ],
          "annotations": {},
          "enabled": true,
          "existingClaim": "",
          "selector": {},
          "size": "8Gi",
          "storageClass": "",
          "subPath": ""
        },
        "podAffinityPreset": "",
        "podAnnotations": {},
        "podAntiAffinityPreset": "soft",
        "podLabels": {},
        "podManagementPolicy": "",
        "podSecurityContext": {
          "enabled": true,
          "fsGroup": 1001
        },
        "priorityClassName": "",
        "readinessProbe": {
          "enabled": true,
          "failureThreshold": 3,
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "resources": {
          "limits": {},
          "requests": {}
        },
        "runtimeClassName": "",
        "schedulerName": "",
        "service": {
          "annotations": {},
          "clusterIP": "",
          "externalTrafficPolicy": "Cluster",
          "extraPorts": [],
          "headless": {
            "annotations": {}
          },
          "loadBalancerIP": "",
          "loadBalancerSourceRanges": [],
          "nodePorts": {
            "mysql": ""
          },
          "ports": {
            "mysql": 3306
          },
          "sessionAffinity": "None",
          "sessionAffinityConfig": {},
          "type": "ClusterIP"
        },
        "sidecars": [],
        "startupProbe": {
          "enabled": true,
          "failureThreshold": 10,
          "initialDelaySeconds": 15,
          "periodSeconds": 10,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "terminationGracePeriodSeconds": "",
        "tolerations": [],
        "topologySpreadConstraints": [],
        "updateStrategy": {
          "type": "RollingUpdate"
        }
      },
      "rbac": {
        "create": false,
        "rules": []
      },
      "secondary": {
        "affinity": {},
        "args": [],
        "command": [],
        "configuration": "[mysqld]\ndefault_authentication_plugin=mysql_native_password\nskip-name-resolve\nexplicit_defaults_for_timestamp\nbasedir=/opt/bitnami/mysql\nplugin_dir=/opt/bitnami/mysql/lib/plugin\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndatadir=/bitnami/mysql/data\ntmpdir=/opt/bitnami/mysql/tmp\nmax_allowed_packet=16M\nbind-address=*\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid\nlog-error=/opt/bitnami/mysql/logs/mysqld.log\ncharacter-set-server=UTF8\ncollation-server=utf8_general_ci\nslow_query_log=0\nslow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log\nlong_query_time=10.0\n\n[client]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\ndefault-character-set=UTF8\nplugin_dir=/opt/bitnami/mysql/lib/plugin\n\n[manager]\nport=3306\nsocket=/opt/bitnami/mysql/tmp/mysql.sock\npid-file=/opt/bitnami/mysql/tmp/mysqld.pid",
        "containerSecurityContext": {
          "enabled": true,
          "runAsNonRoot": true,
          "runAsUser": 1001
        },
        "customLivenessProbe": {},
        "customReadinessProbe": {},
        "customStartupProbe": {},
        "existingConfigmap": "",
        "extraEnvVars": [],
        "extraEnvVarsCM": "",
        "extraEnvVarsSecret": "",
        "extraFlags": "",
        "extraPorts": [],
        "extraVolumeMounts": [],
        "extraVolumes": [],
        "hostAliases": [],
        "initContainers": [],
        "lifecycleHooks": {},
        "livenessProbe": {
          "enabled": true,
          "failureThreshold": 3,
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "name": "secondary",
        "nodeAffinityPreset": {
          "key": "",
          "type": "",
          "values": []
        },
        "nodeSelector": {},
        "pdb": {
          "create": false,
          "maxUnavailable": "",
          "minAvailable": 1
        },
        "persistence": {
          "accessModes": [
            "ReadWriteOnce"
          ],
          "annotations": {},
          "enabled": true,
          "existingClaim": "",
          "selector": {},
          "size": "8Gi",
          "storageClass": "",
          "subPath": ""
        },
        "podAffinityPreset": "",
        "podAnnotations": {},
        "podAntiAffinityPreset": "soft",
        "podLabels": {},
        "podManagementPolicy": "",
        "podSecurityContext": {
          "enabled": true,
          "fsGroup": 1001
        },
        "priorityClassName": "",
        "readinessProbe": {
          "enabled": true,
          "failureThreshold": 3,
          "initialDelaySeconds": 5,
          "periodSeconds": 10,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "replicaCount": 1,
        "resources": {
          "limits": {},
          "requests": {}
        },
        "runtimeClassName": "",
        "schedulerName": "",
        "service": {
          "annotations": {},
          "clusterIP": "",
          "externalTrafficPolicy": "Cluster",
          "extraPorts": [],
          "headless": {
            "annotations": {}
          },
          "loadBalancerIP": "",
          "loadBalancerSourceRanges": [],
          "nodePorts": {
            "mysql": ""
          },
          "ports": {
            "mysql": 3306
          },
          "sessionAffinity": "None",
          "sessionAffinityConfig": {},
          "type": "ClusterIP"
        },
        "sidecars": [],
        "startupProbe": {
          "enabled": true,
          "failureThreshold": 15,
          "initialDelaySeconds": 15,
          "periodSeconds": 10,
          "successThreshold": 1,
          "timeoutSeconds": 1
        },
        "terminationGracePeriodSeconds": "",
        "tolerations": [],
        "topologySpreadConstraints": [],
        "updateStrategy": {
          "type": "RollingUpdate"
        }
      },
      "serviceAccount": {
        "annotations": {},
        "automountServiceAccountToken": true,
        "create": true,
        "name": ""
      },
      "serviceBindings": {
        "enabled": false
      },
      "volumePermissions": {
        "enabled": false,
        "image": {
          "digest": "",
          "pullPolicy": "IfNotPresent",
          "pullSecrets": [],
          "registry": "docker.io",
          "repository": "bitnami/bitnami-shell",
          "tag": "11-debian-11-r123"
        },
        "resources": {}
      }
    },
    "schema": "ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvc2NoZW1hIyIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicHJvcGVydGllcyI6IHsKICAgICJhcmNoaXRlY3R1cmUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJ0aXRsZSI6ICJNeVNRTCBhcmNoaXRlY3R1cmUiLAogICAgICAiZm9ybSI6IHRydWUsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJBbGxvd2VkIHZhbHVlczogYHN0YW5kYWxvbmVgIG9yIGByZXBsaWNhdGlvbmAiLAogICAgICAiZW51bSI6IFsic3RhbmRhbG9uZSIsICJyZXBsaWNhdGlvbiJdCiAgICB9LAogICAgImF1dGgiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJ0aXRsZSI6ICJBdXRoZW50aWNhdGlvbiBjb25maWd1cmF0aW9uIiwKICAgICAgImZvcm0iOiB0cnVlLAogICAgICAicmVxdWlyZWQiOiBbInVzZXJuYW1lIiwgInBhc3N3b3JkIl0sCiAgICAgICJpZiI6IHsKICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICJjcmVhdGVEYXRhYmFzZSI6ICB7ICJlbnVtIjogWyB0cnVlIF0gfQogICAgICAgIH0KICAgICAgfSwKICAgICAgInRoZW4iOiB7CiAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAiZGF0YWJhc2UiOiB7CiAgICAgICAgICAgICJwYXR0ZXJuIjogIlthLXpBLVowLTldezEsNjR9IgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgInJvb3RQYXNzd29yZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAidGl0bGUiOiAiTXlTUUwgcm9vdCBwYXNzd29yZCIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGVmYXVsdHMgdG8gYSByYW5kb20gMTAtY2hhcmFjdGVyIGFscGhhbnVtZXJpYyBzdHJpbmcgaWYgbm90IHNldCIKICAgICAgICB9LAogICAgICAgICJkYXRhYmFzZSI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAidGl0bGUiOiAiTXlTUUwgY3VzdG9tIGRhdGFiYXNlIG5hbWUiLAogICAgICAgICAgIm1heExlbmd0aCI6IDY0CiAgICAgICAgfSwKICAgICAgICAidXNlcm5hbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgInRpdGxlIjogIk15U1FMIGN1c3RvbSB1c2VybmFtZSIKICAgICAgICB9LAogICAgICAgICJwYXNzd29yZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAidGl0bGUiOiAiTXlTUUwgY3VzdG9tIHBhc3N3b3JkIgogICAgICAgIH0sCiAgICAgICAgInJlcGxpY2F0aW9uVXNlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAidGl0bGUiOiAiTXlTUUwgcmVwbGljYXRpb24gdXNlcm5hbWUiCiAgICAgICAgfSwKICAgICAgICAicmVwbGljYXRpb25QYXNzd29yZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAidGl0bGUiOiAiTXlTUUwgcmVwbGljYXRpb24gcGFzc3dvcmQiCiAgICAgICAgfSwKICAgICAgICAiY3JlYXRlRGF0YWJhc2UiOiB7CiAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICJ0aXRsZSI6ICJNeVNRTCBjcmVhdGUgY3VzdG9tIGRhdGFiYXNlIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJwcmltYXJ5IjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAidGl0bGUiOiAiUHJpbWFyeSBkYXRhYmFzZSBjb25maWd1cmF0aW9uIiwKICAgICAgImZvcm0iOiB0cnVlLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAicG9kU2VjdXJpdHlDb250ZXh0IjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJ0aXRsZSI6ICJNeVNRTCBwcmltYXJ5IFBvZCBzZWN1cml0eSBjb250ZXh0IiwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiZW5hYmxlZCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmc0dyb3VwIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZWZhdWx0IjogMTAwMSwKICAgICAgICAgICAgICAiaGlkZGVuIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogZmFsc2UsCiAgICAgICAgICAgICAgICAicGF0aCI6ICJwcmltYXJ5L3BvZFNlY3VyaXR5Q29udGV4dC9lbmFibGVkIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNvbnRhaW5lclNlY3VyaXR5Q29udGV4dCI6IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAidGl0bGUiOiAiTXlTUUwgcHJpbWFyeSBjb250YWluZXIgc2VjdXJpdHkgY29udGV4dCIsCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImVuYWJsZWQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgICAgICB9LAogICAgICAgICAgICAicnVuQXNVc2VyIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZWZhdWx0IjogMTAwMSwKICAgICAgICAgICAgICAiaGlkZGVuIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogZmFsc2UsCiAgICAgICAgICAgICAgICAicGF0aCI6ICJwcmltYXJ5L2NvbnRhaW5lclNlY3VyaXR5Q29udGV4dC9lbmFibGVkIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgInBlcnNpc3RlbmNlIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJ0aXRsZSI6ICJFbmFibGUgcGVyc2lzdGVuY2UgdXNpbmcgUGVyc2lzdGVudCBWb2x1bWUgQ2xhaW1zIiwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiZW5hYmxlZCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAiZGVmYXVsdCI6IHRydWUsCiAgICAgICAgICAgICAgInRpdGxlIjogIklmIHRydWUsIHVzZSBhIFBlcnNpc3RlbnQgVm9sdW1lIENsYWltLCBJZiBmYWxzZSwgdXNlIGVtcHR5RGlyIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJ0aXRsZSI6ICJQZXJzaXN0ZW50IFZvbHVtZSBTaXplIiwKICAgICAgICAgICAgICAiZm9ybSI6IHRydWUsCiAgICAgICAgICAgICAgInJlbmRlciI6ICJzbGlkZXIiLAogICAgICAgICAgICAgICJzbGlkZXJNaW4iOiAxLAogICAgICAgICAgICAgICJzbGlkZXJVbml0IjogIkdpIiwKICAgICAgICAgICAgICAiaGlkZGVuIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogZmFsc2UsCiAgICAgICAgICAgICAgICAicGF0aCI6ICJwcmltYXJ5L3BlcnNpc3RlbmNlL2VuYWJsZWQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgInNlY29uZGFyeSI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInRpdGxlIjogIlNlY29uZGFyeSBkYXRhYmFzZSBjb25maWd1cmF0aW9uIiwKICAgICAgImZvcm0iOiB0cnVlLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAicG9kU2VjdXJpdHlDb250ZXh0IjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJ0aXRsZSI6ICJNeVNRTCBzZWNvbmRhcnkgUG9kIHNlY3VyaXR5IGNvbnRleHQiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJlbmFibGVkIjogewogICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICJkZWZhdWx0IjogZmFsc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZzR3JvdXAiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgImRlZmF1bHQiOiAxMDAxLAogICAgICAgICAgICAgICJoaWRkZW4iOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiBmYWxzZSwKICAgICAgICAgICAgICAgICJwYXRoIjogInNlY29uZGFyeS9wb2RTZWN1cml0eUNvbnRleHQvZW5hYmxlZCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjb250YWluZXJTZWN1cml0eUNvbnRleHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInRpdGxlIjogIk15U1FMIHNlY29uZGFyeSBjb250YWluZXIgc2VjdXJpdHkgY29udGV4dCIsCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImVuYWJsZWQiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgICAgICB9LAogICAgICAgICAgICAicnVuQXNVc2VyIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZWZhdWx0IjogMTAwMSwKICAgICAgICAgICAgICAiaGlkZGVuIjogewogICAgICAgICAgICAgICAgInZhbHVlIjogZmFsc2UsCiAgICAgICAgICAgICAgICAicGF0aCI6ICJzZWNvbmRhcnkvY29udGFpbmVyU2VjdXJpdHlDb250ZXh0L2VuYWJsZWQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAicGVyc2lzdGVuY2UiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInRpdGxlIjogIkVuYWJsZSBwZXJzaXN0ZW5jZSB1c2luZyBQZXJzaXN0ZW50IFZvbHVtZSBDbGFpbXMiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJlbmFibGVkIjogewogICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICJkZWZhdWx0IjogdHJ1ZSwKICAgICAgICAgICAgICAidGl0bGUiOiAiSWYgdHJ1ZSwgdXNlIGEgUGVyc2lzdGVudCBWb2x1bWUgQ2xhaW0sIElmIGZhbHNlLCB1c2UgZW1wdHlEaXIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgInRpdGxlIjogIlBlcnNpc3RlbnQgVm9sdW1lIFNpemUiLAogICAgICAgICAgICAgICJmb3JtIjogdHJ1ZSwKICAgICAgICAgICAgICAicmVuZGVyIjogInNsaWRlciIsCiAgICAgICAgICAgICAgInNsaWRlck1pbiI6IDEsCiAgICAgICAgICAgICAgInNsaWRlclVuaXQiOiAiR2kiLAogICAgICAgICAgICAgICJoaWRkZW4iOiB7CiAgICAgICAgICAgICAgICAidmFsdWUiOiBmYWxzZSwKICAgICAgICAgICAgICAgICJwYXRoIjogInNlY29uZGFyeS9wZXJzaXN0ZW5jZS9lbmFibGVkIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=",
    "files": [
      {
        "name": ".helmignore",
        "data": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oK"
      },
      {
        "name": "README.md",
        "data": ""
      }
    ]
  },
  "manifest": "---\n# Source: mysql/templates/serviceaccount.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: mysql\n  namespace: \"mysql\"\n  labels:\n    app.kubernetes.io/name: mysql\n    helm.sh/chart: mysql-9.10.2\n    app.kubernetes.io/instance: mysql\n    app.kubernetes.io/managed-by: Helm\n  annotations:\nautomountServiceAccountToken: true\nsecrets:\n  - name: mysql\n---\n# Source: mysql/templates/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql\n  namespace: \"mysql\"\n  labels:\n    app.kubernetes.io/name: mysql\n    helm.sh/chart: mysql-9.10.2\n    app.kubernetes.io/instance: mysql\n    app.kubernetes.io/managed-by: Helm\ntype: Opaque\ndata:\n  mysql-root-password: \"cTdkY0gzdEk5VQ==\"\n  mysql-password: \"VTVUaDB4VHpPTQ==\"\n---\n# Source: mysql/templates/primary/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: mysql\n  namespace: \"mysql\"\n  labels:\n    app.kubernetes.io/name: mysql\n    helm.sh/chart: mysql-9.10.2\n    app.kubernetes.io/instance: mysql\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: primary\ndata:\n  my.cnf: |-\n    [mysqld]\n    default_authentication_plugin=mysql_native_password\n    skip-name-resolve\n    explicit_defaults_for_timestamp\n    basedir=/opt/bitnami/mysql\n    plugin_dir=/opt/bitnami/mysql/lib/plugin\n    port=3306\n    socket=/opt/bitnami/mysql/tmp/mysql.sock\n    datadir=/bitnami/mysql/data\n    tmpdir=/opt/bitnami/mysql/tmp\n    max_allowed_packet=16M\n    bind-address=*\n    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid\n    log-error=/opt/bitnami/mysql/logs/mysqld.log\n    character-set-server=UTF8\n    collation-server=utf8_general_ci\n    slow_query_log=0\n    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log\n    long_query_time=10.0\n    \n    [client]\n    port=3306\n    socket=/opt/bitnami/mysql/tmp/mysql.sock\n    default-character-set=UTF8\n    plugin_dir=/opt/bitnami/mysql/lib/plugin\n    \n    [manager]\n    port=3306\n    socket=/opt/bitnami/mysql/tmp/mysql.sock\n    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid\n---\n# Source: mysql/templates/primary/svc-headless.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-headless\n  namespace: \"mysql\"\n  labels:\n    app.kubernetes.io/name: mysql\n    helm.sh/chart: mysql-9.10.2\n    app.kubernetes.io/instance: mysql\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: primary\nspec:\n  type: ClusterIP\n  clusterIP: None\n  publishNotReadyAddresses: true\n  ports:\n    - name: mysql\n      port: 3306\n      targetPort: mysql\n  selector: \n    app.kubernetes.io/name: mysql\n    app.kubernetes.io/instance: mysql\n    app.kubernetes.io/component: primary\n---\n# Source: mysql/templates/primary/svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\n  namespace: \"mysql\"\n  labels:\n    app.kubernetes.io/name: mysql\n    helm.sh/chart: mysql-9.10.2\n    app.kubernetes.io/instance: mysql\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: primary\n  annotations:\nspec:\n  type: ClusterIP\n  sessionAffinity: None\n  ports:\n    - name: mysql\n      port: 3306\n      protocol: TCP\n      targetPort: mysql\n      nodePort: null\n  selector: \n    app.kubernetes.io/name: mysql\n    app.kubernetes.io/instance: mysql\n    app.kubernetes.io/component: primary\n---\n# Source: mysql/templates/primary/statefulset.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql\n  namespace: \"mysql\"\n  labels:\n    app.kubernetes.io/name: mysql\n    helm.sh/chart: mysql-9.10.2\n    app.kubernetes.io/instance: mysql\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/component: primary\nspec:\n  replicas: 1\n  podManagementPolicy: \"\"\n  selector:\n    matchLabels: \n      app.kubernetes.io/name: mysql\n      app.kubernetes.io/instance: mysql\n      app.kubernetes.io/component: primary\n  serviceName: mysql\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      annotations:\n        checksum/configuration: bde71835101f9732e5ba09e11a2d34dbbab3a912e6ff48737d030998105adf6f\n      labels:\n        app.kubernetes.io/name: mysql\n        helm.sh/chart: mysql-9.10.2\n        app.kubernetes.io/instance: mysql\n        app.kubernetes.io/managed-by: Helm\n        app.kubernetes.io/component: primary\n    spec:\n      serviceAccountName: mysql\n      \n      affinity:\n        podAffinity:\n          \n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n            - podAffinityTerm:\n                labelSelector:\n                  matchLabels:\n                    app.kubernetes.io/name: mysql\n                    app.kubernetes.io/instance: mysql\n                topologyKey: kubernetes.io/hostname\n              weight: 1\n        nodeAffinity:\n          \n      securityContext:\n        fsGroup: 1001\n      initContainers:\n      containers:\n        - name: mysql\n          image: docker.io/bitnami/mysql:8.0.33-debian-11-r17\n          imagePullPolicy: \"IfNotPresent\"\n          securityContext:\n            runAsNonRoot: true\n            runAsUser: 1001\n          env:\n            - name: BITNAMI_DEBUG\n              value: \"false\"\n            - name: MYSQL_ROOT_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: mysql\n                  key: mysql-root-password\n            - name: MYSQL_DATABASE\n              value: \"my_database\"\n          envFrom:\n          ports:\n            - name: mysql\n              containerPort: 3306\n          livenessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 5\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n            exec:\n              command:\n                - /bin/bash\n                - -ec\n                - |\n                  password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\n                  if [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n                      password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\n                  fi\n                  mysqladmin status -uroot -p\"${password_aux}\"\n          readinessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 5\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n            exec:\n              command:\n                - /bin/bash\n                - -ec\n                - |\n                  password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\n                  if [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n                      password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\n                  fi\n                  mysqladmin status -uroot -p\"${password_aux}\"\n          startupProbe:\n            failureThreshold: 10\n            initialDelaySeconds: 15\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 1\n            exec:\n              command:\n                - /bin/bash\n                - -ec\n                - |\n                  password_aux=\"${MYSQL_ROOT_PASSWORD:-}\"\n                  if [[ -f \"${MYSQL_ROOT_PASSWORD_FILE:-}\" ]]; then\n                      password_aux=$(cat \"$MYSQL_ROOT_PASSWORD_FILE\")\n                  fi\n                  mysqladmin status -uroot -p\"${password_aux}\"\n          resources: \n            limits: {}\n            requests: {}\n          volumeMounts:\n            - name: data\n              mountPath: /bitnami/mysql\n            - name: config\n              mountPath: /opt/bitnami/mysql/conf/my.cnf\n              subPath: my.cnf\n      volumes:\n        - name: config\n          configMap:\n            name: mysql\n  volumeClaimTemplates:\n    - metadata:\n        name: data\n        labels: \n          app.kubernetes.io/name: mysql\n          app.kubernetes.io/instance: mysql\n          app.kubernetes.io/component: primary\n        annotations:\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        resources:\n          requests:\n            storage: \"8Gi\"\n",
  "version": 1,
  "namespace": "mysql"
}
