##
# Copyright (C) 2023-2024 Hedera Hashgraph, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##

name: "ZXC: E2E Test"
# The purpose of this reusable workflow is to run the e2e tests on every PR and commit.
# This reusable component is called by the following workflows:
# - .github/workflows/flow-pull-request-checks.yaml
# - .github/workflows/flow-build-application.yaml

on:
  workflow_call:
    inputs:
      node-version:
        description: "NodeJS Version:"
        type: string
        required: false
        default: "20.14.0"
      custom-job-label:
        description: "Custom Job Label:"
        type: string
        required: false
        default: "E2E Test"
      npm-test-script:
        description: "NPM Test Run Script:"
        type: string
        required: false
        default: "test-e2e"
      coverage-subdirectory:
        description: "Coverage Report Subdirectory:"
        type: string
        required: false
        default: "e2e"
      coverage-report-name:
        description: "Coverage Report Name:"
        type: string
        required: false
        default: "E2E Tests Coverage Report"

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write
  checks: write
  statuses: write

env:
  CG_EXEC: export R_UID=$(id -u); CGROUP_LOGLEVEL=DEBUG cgexec -g cpu,memory:user.slice/user-${R_UID}.slice/user@${R_UID}.service/e2e-${{ github.run_id }} --sticky ionice -c 2 -n 2 nice -n 19

jobs:
  e2e-test:
    name: ${{ inputs.custom-job-label || 'E2E Test' }}
    runs-on: [self-hosted, Linux, large, ephemeral]
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Control Groups
        run: |
          echo "::group::Get System Configuration"
            USR_ID="$(id -un)"
            GRP_ID="$(id -gn)"
            E2E_MEM_LIMIT="30064771072"
            AGENT_MEM_LIMIT="2147483648"
            USER_SLICE="user.slice/user-$(id -u).slice"
            USER_SERVICE="${USER_SLICE}/user@$(id -u).service" 
            E2E_GROUP_NAME="${USER_SERVICE}/e2e-${{ github.run_id }}"
            AGENT_GROUP_NAME="${USER_SERVICE}/agent-${{ github.run_id }}"
          echo "::endgroup::"

          echo "::group::Install Control Group Tools"
            if ! command -v cgcreate >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y cgroup-tools
            fi
          echo "::endgroup::"

          echo "::group::Create Control Groups"
            sudo cgcreate -g cpu,memory:${USER_SLICE} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
            sudo cgcreate -g cpu,memory:${USER_SERVICE} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
            sudo cgcreate -g cpu,memory:${E2E_GROUP_NAME} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
            sudo cgcreate -g cpu,memory:${AGENT_GROUP_NAME} -a ${USR_ID}:${GRP_ID} -t ${USR_ID}:${GRP_ID}
          echo "::endgroup::"

          echo "::group::Set Control Group Limits"
            cgset -r cpu.weight=768 ${E2E_GROUP_NAME}
            cgset -r cpu.weight=500 ${AGENT_GROUP_NAME}
            cgset -r memory.max=${E2E_MEM_LIMIT} ${E2E_GROUP_NAME}
            cgset -r memory.max=${AGENT_MEM_LIMIT} ${AGENT_GROUP_NAME}
            cgset -r memory.swap.max=${E2E_MEM_LIMIT} ${E2E_GROUP_NAME}
            cgset -r memory.swap.max=${AGENT_MEM_LIMIT} ${AGENT_GROUP_NAME}
          echo "::endgroup::"

          echo "::group::Move Runner Processes to Control Groups"
            sudo cgclassify --sticky -g cpu,memory:${AGENT_GROUP_NAME} $(pgrep 'Runner.Listener' | tr '\n' ' ')
            sudo cgclassify -g cpu,memory:${AGENT_GROUP_NAME} $(pgrep 'Runner.Worker' | tr '\n' ' ')
          echo "::endgroup::"

      - name: Setup Node with Retry
        uses: Wandalen/wretry.action@6feedb7dedadeb826de0f45ff482b53b379a7844 # v3.5.0
        with:
          action: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
          with: |
            node-version: ${{ inputs.node-version }}
            cache: npm
          attempt_limit: 3
          attempt_delay: 5000

      - name: Install wget
        run: |
          sudo apt-get update
          sudo apt-get install -y wget

      - name: Setup Kind
        uses: helm/kind-action@0025e74a8c7512023d06dc019c617aa3cf561fde # v1.10.0
        with:
          install_only: true
          node_image: kindest/node:v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72
          version: v0.21.0
          kubectl_version: v1.28.6
          verbosity: 3
          wait: 120s

      - name: Install Dependencies
        id: npm-deps
        run: npm ci

      - name: Pull Kind Docker Image
        run: docker image pull kindest/node:v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72

      - name: Setup Java
        if: ${{ runner.os == 'linux' && inputs.npm-test-script == 'test-e2e-node-local-build' && !cancelled() && !failure() }}
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4.0.0
        with:
          distribution: temurin
          java-version: 21.0.1

      - name: Setup Gradle
        if: ${{ runner.os == 'linux' && inputs.npm-test-script == 'test-e2e-node-local-build' && !cancelled() && !failure() }}
        uses: gradle/gradle-build-action@ac2d340dc04d9e1113182899e983b5400c17cda1 # v3.5.0
        with:
          cache-read-only: false

      - name: Build Hedera code locally
        if: ${{ runner.os == 'linux' && inputs.npm-test-script == 'test-e2e-node-local-build' && !cancelled() && !failure() }}
        run: |
          cd ..
          git clone https://github.com/hashgraph/hedera-services.git
          cd hedera-services
          ls -ltr
          ${{ env.CG_EXEC }} ./gradlew assemble --stacktrace --info
          cd ../solo

      - name: Setup E2E Tests
        run: | 
          npm link
          ${{ env.CG_EXEC }} ./test/e2e/setup-e2e.sh

      - name: Run E2E Tests
        run: |
          ${{ env.CG_EXEC }} npm run ${{ inputs.npm-test-script }}

      - name: RPC relay smoke test
        if: ${{ runner.os == 'linux' && inputs.npm-test-script == 'test-e2e-relay' && !cancelled() && !failure() }}
        run: |
          .github/workflows/script/relay_smoke_test.sh 

      - name: Upload E2E Logs to GitHub
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: solo-${{ inputs.npm-test-script }}.log
          path: ~/.solo/logs/*
          overwrite: true
          if-no-files-found: error

      - name: Publish E2E Test Report
        uses: EnricoMi/publish-unit-test-result-action@567cc7f8dcea3eba5da355f6ebc95663310d8a07 # v2.17.0
        if: ${{ steps.npm-deps.conclusion == 'success' && !cancelled() }}
        with:
          check_name: ${{ inputs.coverage-report-name }}
          # the subdirectory is also used in the junit name to avoid conflicts
          files: "junit-${{ inputs.coverage-subdirectory }}.xml"

      - name: Publish E2E Coverage Report
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: ${{ !cancelled() }}
        with:
          name: ${{ inputs.coverage-report-name }}
          path: 'coverage/${{ inputs.coverage-subdirectory }}'
